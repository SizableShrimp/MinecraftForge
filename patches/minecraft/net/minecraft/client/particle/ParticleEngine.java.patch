--- a/net/minecraft/client/particle/ParticleEngine.java
+++ b/net/minecraft/client/particle/ParticleEngine.java
@@ -65,7 +_,7 @@
    private final Queue<TrackingEmitter> f_107290_ = Queues.newArrayDeque();
    private final TextureManager f_107291_;
    private final Random f_107292_ = new Random();
-   private final Int2ObjectMap<ParticleProvider<?>> f_107293_ = new Int2ObjectOpenHashMap<>();
+   private final Map<ResourceLocation, ParticleProvider<?>> f_107293_ = new java.util.HashMap<>();
    private final Queue<Particle> f_107294_ = Queues.newArrayDeque();
    private final Map<ResourceLocation, ParticleEngine.MutableSpriteSet> f_107295_ = Maps.newHashMap();
    private final TextureAtlas f_107296_ = new TextureAtlas(TextureAtlas.f_118260_);
@@ -153,13 +_,13 @@
    }
 
    public <T extends ParticleOptions> void m_107381_(ParticleType<T> p_107382_, ParticleProvider<T> p_107383_) {
-      this.f_107293_.put(Registry.f_122829_.m_7447_(p_107382_), p_107383_);
+      this.f_107293_.put(Registry.f_122829_.m_7981_(p_107382_), p_107383_);
    }
 
    public <T extends ParticleOptions> void m_107378_(ParticleType<T> p_107379_, ParticleEngine.SpriteParticleRegistration<T> p_107380_) {
       ParticleEngine.MutableSpriteSet particleengine$mutablespriteset = new ParticleEngine.MutableSpriteSet();
       this.f_107295_.put(Registry.f_122829_.m_7981_(p_107379_), particleengine$mutablespriteset);
-      this.f_107293_.put(Registry.f_122829_.m_7447_(p_107379_), p_107380_.m_107419_(particleengine$mutablespriteset));
+      this.f_107293_.put(Registry.f_122829_.m_7981_(p_107379_), p_107380_.m_107419_(particleengine$mutablespriteset));
    }
 
    public CompletableFuture<Void> m_5540_(PreparableReloadListener.PreparationBarrier p_107305_, ResourceManager p_107306_, ProfilerFiller p_107307_, ProfilerFiller p_107308_, Executor p_107309_, Executor p_107310_) {
@@ -248,7 +_,7 @@
 
    @Nullable
    private <T extends ParticleOptions> Particle m_107395_(T p_107396_, double p_107397_, double p_107398_, double p_107399_, double p_107400_, double p_107401_, double p_107402_) {
-      ParticleProvider<T> particleprovider = (ParticleProvider<T>)this.f_107293_.get(Registry.f_122829_.m_7447_(p_107396_.m_6012_()));
+      ParticleProvider<T> particleprovider = (ParticleProvider<T>)this.f_107293_.get(Registry.f_122829_.m_7981_(p_107396_.m_6012_()));
       return particleprovider == null ? null : particleprovider.m_6966_(p_107396_, this.f_107287_, p_107397_, p_107398_, p_107399_, p_107400_, p_107401_, p_107402_);
    }
 
@@ -313,16 +_,29 @@
       }
    }
 
+   /**@deprecated Forge: use {@link #renderParticles(MatrixStack, IRenderTypeBuffer.Impl, LightTexture, ActiveRenderInfo, float, net.minecraft.client.renderer.culling.ClippingHelper)} with ClippingHelper as additional parameter*/
+   @Deprecated
    public void m_107336_(PoseStack p_107337_, MultiBufferSource.BufferSource p_107338_, LightTexture p_107339_, Camera p_107340_, float p_107341_) {
+      renderParticles(p_107337_, p_107338_, p_107339_, p_107340_, p_107341_, null);
+   }
+
+   public void renderParticles(PoseStack p_107337_, MultiBufferSource.BufferSource p_107338_, LightTexture p_107339_, Camera p_107340_, float p_107341_, @Nullable net.minecraft.client.renderer.culling.Frustum clippingHelper) {
       p_107339_.m_109896_();
+      Runnable enable = () -> {
       RenderSystem.m_69477_();
       RenderSystem.m_69452_();
       RenderSystem.m_69482_();
       RenderSystem.m_69483_();
+         RenderSystem.m_69388_(org.lwjgl.opengl.GL13.GL_TEXTURE2);
+         RenderSystem.m_69493_();
+         RenderSystem.m_69388_(org.lwjgl.opengl.GL13.GL_TEXTURE0);
+      };
       RenderSystem.m_69869_();
       RenderSystem.m_69841_(p_107337_.m_85850_().m_85861_());
 
-      for(ParticleRenderType particlerendertype : f_107288_) {
+      for(ParticleRenderType particlerendertype : this.f_107289_.keySet()) { // Forge: allow custom IParticleRenderType's
+         if (particlerendertype == ParticleRenderType.f_107434_) continue;
+         enable.run(); //Forge: MC-168672 Make sure all render types have the correct GL state.
          Iterable<Particle> iterable = this.f_107289_.get(particlerendertype);
          if (iterable != null) {
             RenderSystem.m_69439_(1.0F, 1.0F, 1.0F, 1.0F);
@@ -331,6 +_,7 @@
             particlerendertype.m_6505_(bufferbuilder, this.f_107291_);
 
             for(Particle particle : iterable) {
+               if (clippingHelper != null && particle.shouldCull() && !clippingHelper.m_113029_(particle.m_107277_())) continue;
                try {
                   particle.m_5744_(bufferbuilder, p_107340_, p_107341_);
                } catch (Throwable throwable) {
@@ -362,7 +_,7 @@
    }
 
    public void m_107355_(BlockPos p_107356_, BlockState p_107357_) {
-      if (!p_107357_.m_60795_()) {
+      if (!p_107357_.isAir(this.f_107287_, p_107356_) && !p_107357_.addDestroyEffects(this.f_107287_, p_107356_, this)) {
          VoxelShape voxelshape = p_107357_.m_60808_(this.f_107287_, p_107356_);
          double d0 = 0.25D;
          voxelshape.m_83286_((p_107361_, p_107362_, p_107363_, p_107364_, p_107365_, p_107366_) -> {
@@ -432,6 +_,12 @@
 
    public String m_107403_() {
       return String.valueOf(this.f_107289_.values().stream().mapToInt(Collection::size).sum());
+   }
+
+   public void addBlockHitEffects(BlockPos pos, net.minecraft.world.phys.BlockHitResult target) {
+      BlockState state = f_107287_.m_8055_(pos);
+      if (!state.addHitEffects(f_107287_, target, this))
+         m_107367_(pos, target.m_82434_());
    }
 
    @OnlyIn(Dist.CLIENT)
