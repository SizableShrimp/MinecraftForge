--- a/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
+++ b/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
@@ -68,13 +_,16 @@
    private Vec3 f_112683_ = Vec3.f_82478_;
 
    public ChunkRenderDispatcher(Level p_112686_, LevelRenderer p_112687_, Executor p_112688_, boolean p_112689_, ChunkBufferBuilderPack p_112690_) {
-      this.f_112681_ = p_112686_;
-      this.f_112682_ = p_112687_;
+      this(p_112686_, p_112687_, p_112688_, p_112689_, p_112690_, -1);
+   }
+   public ChunkRenderDispatcher(Level p_i226020_1_, LevelRenderer p_i226020_2_, Executor p_i226020_3_, boolean p_i226020_4_, ChunkBufferBuilderPack p_i226020_5_, int countRenderBuilders) {
+      this.f_112681_ = p_i226020_1_;
+      this.f_112682_ = p_i226020_2_;
       int i = Math.max(1, (int)((double)Runtime.getRuntime().maxMemory() * 0.3D) / (RenderType.m_110506_().stream().mapToInt(RenderType::m_110507_).sum() * 4) - 1);
       int j = Runtime.getRuntime().availableProcessors();
-      int k = p_112689_ ? j : Math.min(j, 4);
-      int l = Math.max(1, Math.min(k, i));
-      this.f_112678_ = p_112690_;
+      int k = p_i226020_4_ ? j : Math.min(j, 4);
+      int l = countRenderBuilders < 0 ? Math.max(1, Math.min(k, i)) : countRenderBuilders;
+      this.f_112678_ = p_i226020_5_;
       List<ChunkBufferBuilderPack> list = Lists.newArrayListWithExpectedSize(l);
 
       try {
@@ -94,8 +_,8 @@
 
       this.f_112674_ = Queues.newArrayDeque(list);
       this.f_112677_ = this.f_112674_.size();
-      this.f_112680_ = p_112688_;
-      this.f_112679_ = ProcessorMailbox.m_18751_(p_112688_, "Chunk Renderer");
+      this.f_112680_ = p_i226020_3_;
+      this.f_112679_ = ProcessorMailbox.m_18751_(p_i226020_3_, "Chunk Renderer");
       this.f_112679_.m_6937_(this::m_112734_);
    }
 
@@ -111,15 +_,15 @@
             this.f_112676_ = this.f_112673_.size();
             this.f_112677_ = this.f_112674_.size();
             CompletableFuture.runAsync(() -> {
-            }, this.f_112680_).thenCompose((p_112714_) -> {
+            }, this.f_112680_).thenCompose((p_228901_2_) -> {
                return chunkrenderdispatcher$renderchunk$chunkcompiletask.m_5869_(chunkbufferbuilderpack);
-            }).whenComplete((p_112704_, p_112705_) -> {
-               if (p_112705_ != null) {
-                  CrashReport crashreport = CrashReport.m_127521_(p_112705_, "Batching chunks");
+            }).whenComplete((p_228898_2_, p_228898_3_) -> {
+               if (p_228898_3_ != null) {
+                  CrashReport crashreport = CrashReport.m_127521_(p_228898_3_, "Batching chunks");
                   Minecraft.m_91087_().m_91253_(Minecraft.m_91087_().m_91354_(crashreport));
                } else {
                   this.f_112679_.m_6937_(() -> {
-                     if (p_112704_ == ChunkRenderDispatcher.ChunkTaskResult.SUCCESSFUL) {
+                     if (p_228898_2_ == ChunkRenderDispatcher.ChunkTaskResult.SUCCESSFUL) {
                         chunkbufferbuilderpack.m_108838_();
                      } else {
                         chunkbufferbuilderpack.m_108841_();
@@ -175,7 +_,7 @@
 
    public CompletableFuture<Void> m_112695_(BufferBuilder p_112696_, VertexBuffer p_112697_) {
       return CompletableFuture.runAsync(() -> {
-      }, this.f_112675_::add).thenCompose((p_112701_) -> {
+      }, this.f_112675_::add).thenCompose((p_228897_3_) -> {
          return this.m_112720_(p_112696_, p_112697_);
       });
    }
@@ -206,63 +_,25 @@
    }
 
    @OnlyIn(Dist.CLIENT)
-   static enum ChunkTaskResult {
-      SUCCESSFUL,
-      CANCELLED;
-   }
-
-   @OnlyIn(Dist.CLIENT)
-   public static class CompiledChunk {
-      public static final ChunkRenderDispatcher.CompiledChunk f_112748_ = new ChunkRenderDispatcher.CompiledChunk() {
-         public boolean m_7259_(Direction p_112782_, Direction p_112783_) {
-            return false;
-         }
-      };
-      private final Set<RenderType> f_112749_ = new ObjectArraySet<>();
-      private final Set<RenderType> f_112750_ = new ObjectArraySet<>();
-      private boolean f_112751_ = true;
-      private final List<BlockEntity> f_112752_ = Lists.newArrayList();
-      private VisibilitySet f_112753_ = new VisibilitySet();
-      @Nullable
-      private BufferBuilder.State f_112754_;
-
-      public boolean m_112757_() {
-         return this.f_112751_;
-      }
-
-      public boolean m_112758_(RenderType p_112759_) {
-         return !this.f_112749_.contains(p_112759_);
-      }
-
-      public List<BlockEntity> m_112773_() {
-         return this.f_112752_;
-      }
-
-      public boolean m_7259_(Direction p_112771_, Direction p_112772_) {
-         return this.f_112753_.m_112983_(p_112771_, p_112772_);
-      }
-   }
-
-   @OnlyIn(Dist.CLIENT)
-   public class RenderChunk {
+   public class RenderChunk implements net.minecraftforge.client.extensions.IForgeRenderChunk {
       public final AtomicReference<ChunkRenderDispatcher.CompiledChunk> f_112784_ = new AtomicReference<>(ChunkRenderDispatcher.CompiledChunk.f_112748_);
       @Nullable
       private ChunkRenderDispatcher.RenderChunk.RebuildTask f_112787_;
       @Nullable
       private ChunkRenderDispatcher.RenderChunk.ResortTransparencyTask f_112788_;
       private final Set<BlockEntity> f_112789_ = Sets.newHashSet();
-      private final Map<RenderType, VertexBuffer> f_112790_ = RenderType.m_110506_().stream().collect(Collectors.toMap((p_112837_) -> {
-         return p_112837_;
-      }, (p_112834_) -> {
+      private final Map<RenderType, VertexBuffer> f_112790_ = RenderType.m_110506_().stream().collect(Collectors.toMap((p_228934_0_) -> {
+         return p_228934_0_;
+      }, (p_228933_0_) -> {
          return new VertexBuffer(DefaultVertexFormat.f_85811_);
       }));
       public AABB f_112785_;
       private int f_112791_ = -1;
       private boolean f_112792_ = true;
       private final BlockPos.MutableBlockPos f_112793_ = new BlockPos.MutableBlockPos(-1, -1, -1);
-      private final BlockPos.MutableBlockPos[] f_112794_ = Util.m_137469_(new BlockPos.MutableBlockPos[6], (p_112831_) -> {
-         for(int i = 0; i < p_112831_.length; ++i) {
-            p_112831_[i] = new BlockPos.MutableBlockPos();
+      private final BlockPos.MutableBlockPos[] f_112794_ = Util.m_137469_(new BlockPos.MutableBlockPos[6], (p_228932_0_) -> {
+         for(int i = 0; i < p_228932_0_.length; ++i) {
+            p_228932_0_[i] = new BlockPos.MutableBlockPos();
          }
 
       });
@@ -370,7 +_,7 @@
          if (!chunkrenderdispatcher$compiledchunk.f_112750_.contains(p_112810_)) {
             return false;
          } else {
-            this.f_112788_ = new ChunkRenderDispatcher.RenderChunk.ResortTransparencyTask(this.m_112832_(), chunkrenderdispatcher$compiledchunk);
+            this.f_112788_ = new ChunkRenderDispatcher.RenderChunk.ResortTransparencyTask(new net.minecraft.world.level.ChunkPos(m_112839_()), this.m_112832_(), chunkrenderdispatcher$compiledchunk);
             p_112811_.m_112709_(this.f_112788_);
             return true;
          }
@@ -393,8 +_,8 @@
          this.m_112843_();
          BlockPos blockpos = this.f_112793_.m_7949_();
          int i = 1;
-         RenderChunkRegion renderchunkregion = RenderChunkRegion.m_112920_(ChunkRenderDispatcher.this.f_112681_, blockpos.m_7918_(-1, -1, -1), blockpos.m_7918_(16, 16, 16), 1);
-         this.f_112787_ = new ChunkRenderDispatcher.RenderChunk.RebuildTask(this.m_112832_(), renderchunkregion);
+         RenderChunkRegion renderchunkregion = createRegionRenderCache(ChunkRenderDispatcher.this.f_112681_, blockpos.m_7918_(-1, -1, -1), blockpos.m_7918_(16, 16, 16), 1);
+         this.f_112787_ = new ChunkRenderDispatcher.RenderChunk.RebuildTask(new net.minecraft.world.level.ChunkPos(m_112839_()), this.m_112832_(), renderchunkregion);
          return this.f_112787_;
       }
 
@@ -422,9 +_,19 @@
       abstract class ChunkCompileTask implements Comparable<ChunkRenderDispatcher.RenderChunk.ChunkCompileTask> {
          protected final double f_112847_;
          protected final AtomicBoolean f_112848_ = new AtomicBoolean(false);
+         protected java.util.Map<net.minecraft.core.BlockPos, net.minecraftforge.client.model.data.IModelData> modelData;
 
          public ChunkCompileTask(double p_112852_) {
-            this.f_112847_ = p_112852_;
+            this(null, p_112852_);
+         }
+
+         public ChunkCompileTask(@Nullable net.minecraft.world.level.ChunkPos pos, double p_i226023_2_) {
+            this.f_112847_ = p_i226023_2_;
+            if (pos == null) {
+               this.modelData = java.util.Collections.emptyMap();
+            } else {
+               this.modelData = net.minecraftforge.client.model.ModelDataManager.getModelData(net.minecraft.client.Minecraft.m_91087_().f_91073_, pos);
+            }
          }
 
          public abstract CompletableFuture<ChunkRenderDispatcher.ChunkTaskResult> m_5869_(ChunkBufferBuilderPack p_112853_);
@@ -434,6 +_,10 @@
          public int compareTo(ChunkRenderDispatcher.RenderChunk.ChunkCompileTask p_112855_) {
             return Doubles.compare(this.f_112847_, p_112855_.f_112847_);
          }
+
+         public net.minecraftforge.client.model.data.IModelData getModelData(net.minecraft.core.BlockPos pos) {
+            return modelData.getOrDefault(pos, net.minecraftforge.client.model.data.EmptyModelData.INSTANCE);
+         }
       }
 
       @OnlyIn(Dist.CLIENT)
@@ -441,9 +_,14 @@
          @Nullable
          protected RenderChunkRegion f_112858_;
 
+         @Deprecated
          public RebuildTask(double p_112862_, @Nullable RenderChunkRegion p_112863_) {
-            super(p_112862_);
-            this.f_112858_ = p_112863_;
+            this(null, p_112862_, p_112863_);
+         }
+
+         public RebuildTask(@Nullable net.minecraft.world.level.ChunkPos pos, double p_i226024_2_, @Nullable RenderChunkRegion p_i226024_4_) {
+            super(pos, p_i226024_2_);
+            this.f_112858_ = p_i226024_4_;
          }
 
          public CompletableFuture<ChunkRenderDispatcher.ChunkTaskResult> m_5869_(ChunkBufferBuilderPack p_112872_) {
@@ -468,12 +_,12 @@
                   return CompletableFuture.completedFuture(ChunkRenderDispatcher.ChunkTaskResult.CANCELLED);
                } else {
                   List<CompletableFuture<Void>> list = Lists.newArrayList();
-                  chunkrenderdispatcher$compiledchunk.f_112750_.forEach((p_112884_) -> {
-                     list.add(ChunkRenderDispatcher.this.m_112695_(p_112872_.m_108839_(p_112884_), RenderChunk.this.m_112807_(p_112884_)));
+                  chunkrenderdispatcher$compiledchunk.f_112750_.forEach((p_228943_3_) -> {
+                     list.add(ChunkRenderDispatcher.this.m_112695_(p_112872_.m_108839_(p_228943_3_), RenderChunk.this.m_112807_(p_228943_3_)));
                   });
-                  return Util.m_137567_(list).handle((p_112875_, p_112876_) -> {
-                     if (p_112876_ != null && !(p_112876_ instanceof CancellationException) && !(p_112876_ instanceof InterruptedException)) {
-                        Minecraft.m_91087_().m_91253_(CrashReport.m_127521_(p_112876_, "Rendering chunk"));
+                  return Util.m_137567_(list).handle((p_228941_2_, p_228941_3_) -> {
+                     if (p_228941_3_ != null && !(p_228941_3_ instanceof CancellationException) && !(p_228941_3_ instanceof InterruptedException)) {
+                        Minecraft.m_91087_().m_91253_(CrashReport.m_127521_(p_228941_3_, "Rendering chunk"));
                      }
 
                      if (this.f_112848_.get()) {
@@ -508,7 +_,7 @@
                      visgraph.m_112971_(blockpos2);
                   }
 
-                  if (block.m_60588_()) {
+                  if (blockstate.hasTileEntity()) {
                      BlockEntity blockentity = renderchunkregion.m_112927_(blockpos2, LevelChunk.EntityCreationType.CHECK);
                      if (blockentity != null) {
                         this.m_112877_(p_112869_, set, blockentity);
@@ -516,8 +_,10 @@
                   }
 
                   FluidState fluidstate = renderchunkregion.m_6425_(blockpos2);
-                  if (!fluidstate.m_76178_()) {
-                     RenderType rendertype = ItemBlockRenderTypes.m_109287_(fluidstate);
+                  net.minecraftforge.client.model.data.IModelData modelData = getModelData(blockpos2);
+                  for (RenderType rendertype : RenderType.m_110506_()) {
+                     net.minecraftforge.client.ForgeHooksClient.setRenderLayer(rendertype);
+                  if (!fluidstate.m_76178_() && ItemBlockRenderTypes.canRenderInLayer(fluidstate, rendertype)) {
                      BufferBuilder bufferbuilder = p_112870_.m_108839_(rendertype);
                      if (p_112869_.f_112750_.add(rendertype)) {
                         RenderChunk.this.m_112805_(bufferbuilder);
@@ -529,8 +_,8 @@
                      }
                   }
 
-                  if (blockstate.m_60799_() != RenderShape.INVISIBLE) {
-                     RenderType rendertype1 = ItemBlockRenderTypes.m_109282_(blockstate);
+                  if (blockstate.m_60799_() != RenderShape.INVISIBLE && ItemBlockRenderTypes.canRenderInLayer(blockstate, rendertype)) {
+                     RenderType rendertype1 = rendertype;
                      BufferBuilder bufferbuilder2 = p_112870_.m_108839_(rendertype1);
                      if (p_112869_.f_112750_.add(rendertype1)) {
                         RenderChunk.this.m_112805_(bufferbuilder2);
@@ -538,14 +_,16 @@
 
                      posestack.m_85836_();
                      posestack.m_85837_((double)(blockpos2.m_123341_() & 15), (double)(blockpos2.m_123342_() & 15), (double)(blockpos2.m_123343_() & 15));
-                     if (blockrenderdispatcher.m_110924_(blockstate, blockpos2, renderchunkregion, posestack, bufferbuilder2, true, random)) {
+                     if (blockrenderdispatcher.renderModel(blockstate, blockpos2, renderchunkregion, posestack, bufferbuilder2, true, random, modelData)) {
                         p_112869_.f_112751_ = false;
                         p_112869_.f_112749_.add(rendertype1);
                      }
 
                      posestack.m_85849_();
                   }
+                  }
                }
+               net.minecraftforge.client.ForgeHooksClient.setRenderLayer(null);
 
                if (p_112869_.f_112749_.contains(RenderType.m_110466_())) {
                   BufferBuilder bufferbuilder1 = p_112870_.m_108839_(RenderType.m_110466_());
@@ -564,10 +_,10 @@
          private <E extends BlockEntity> void m_112877_(ChunkRenderDispatcher.CompiledChunk p_112878_, Set<BlockEntity> p_112879_, E p_112880_) {
             BlockEntityRenderer<E> blockentityrenderer = BlockEntityRenderDispatcher.f_112246_.m_112265_(p_112880_);
             if (blockentityrenderer != null) {
-               p_112878_.f_112752_.add(p_112880_);
                if (blockentityrenderer.m_5932_(p_112880_)) {
                   p_112879_.add(p_112880_);
                }
+               else p_112878_.f_112752_.add(p_112880_); //FORGE: Fix MC-112730
             }
 
          }
@@ -585,9 +_,14 @@
       class ResortTransparencyTask extends ChunkRenderDispatcher.RenderChunk.ChunkCompileTask {
          private final ChunkRenderDispatcher.CompiledChunk f_112886_;
 
+         @Deprecated
          public ResortTransparencyTask(double p_112889_, ChunkRenderDispatcher.CompiledChunk p_112890_) {
-            super(p_112889_);
-            this.f_112886_ = p_112890_;
+            this(null, p_112889_, p_112890_);
+         }
+
+         public ResortTransparencyTask(@Nullable net.minecraft.world.level.ChunkPos pos, double p_i226025_2_, ChunkRenderDispatcher.CompiledChunk p_i226025_4_) {
+            super(pos, p_i226025_2_);
+            this.f_112886_ = p_i226025_4_;
          }
 
          public CompletableFuture<ChunkRenderDispatcher.ChunkTaskResult> m_5869_(ChunkBufferBuilderPack p_112893_) {
@@ -614,12 +_,12 @@
                   if (this.f_112848_.get()) {
                      return CompletableFuture.completedFuture(ChunkRenderDispatcher.ChunkTaskResult.CANCELLED);
                   } else {
-                     CompletableFuture<ChunkRenderDispatcher.ChunkTaskResult> completablefuture = ChunkRenderDispatcher.this.m_112695_(p_112893_.m_108839_(RenderType.m_110466_()), RenderChunk.this.m_112807_(RenderType.m_110466_())).thenApply((p_112898_) -> {
+                     CompletableFuture<ChunkRenderDispatcher.ChunkTaskResult> completablefuture = ChunkRenderDispatcher.this.m_112695_(p_112893_.m_108839_(RenderType.m_110466_()), RenderChunk.this.m_112807_(RenderType.m_110466_())).thenApply((p_228947_0_) -> {
                         return ChunkRenderDispatcher.ChunkTaskResult.CANCELLED;
                      });
-                     return completablefuture.handle((p_112895_, p_112896_) -> {
-                        if (p_112896_ != null && !(p_112896_ instanceof CancellationException) && !(p_112896_ instanceof InterruptedException)) {
-                           Minecraft.m_91087_().m_91253_(CrashReport.m_127521_(p_112896_, "Rendering chunk"));
+                     return completablefuture.handle((p_228946_1_, p_228946_2_) -> {
+                        if (p_228946_2_ != null && !(p_228946_2_ instanceof CancellationException) && !(p_228946_2_ instanceof InterruptedException)) {
+                           Minecraft.m_91087_().m_91253_(CrashReport.m_127521_(p_228946_2_, "Rendering chunk"));
                         }
 
                         return this.f_112848_.get() ? ChunkRenderDispatcher.ChunkTaskResult.CANCELLED : ChunkRenderDispatcher.ChunkTaskResult.SUCCESSFUL;
@@ -634,6 +_,44 @@
          public void m_6204_() {
             this.f_112848_.set(true);
          }
+      }
+   }
+
+   @OnlyIn(Dist.CLIENT)
+   static enum ChunkTaskResult {
+      SUCCESSFUL,
+      CANCELLED;
+   }
+
+   @OnlyIn(Dist.CLIENT)
+   public static class CompiledChunk {
+      public static final ChunkRenderDispatcher.CompiledChunk f_112748_ = new ChunkRenderDispatcher.CompiledChunk() {
+         public boolean m_7259_(Direction p_112782_, Direction p_112783_) {
+            return false;
+         }
+      };
+      private final Set<RenderType> f_112749_ = new ObjectArraySet<>();
+      private final Set<RenderType> f_112750_ = new ObjectArraySet<>();
+      private boolean f_112751_ = true;
+      private final List<BlockEntity> f_112752_ = Lists.newArrayList();
+      private VisibilitySet f_112753_ = new VisibilitySet();
+      @Nullable
+      private BufferBuilder.State f_112754_;
+
+      public boolean m_112757_() {
+         return this.f_112751_;
+      }
+
+      public boolean m_112758_(RenderType p_112759_) {
+         return !this.f_112749_.contains(p_112759_);
+      }
+
+      public List<BlockEntity> m_112773_() {
+         return this.f_112752_;
+      }
+
+      public boolean m_7259_(Direction p_112771_, Direction p_112772_) {
+         return this.f_112753_.m_112983_(p_112771_, p_112772_);
       }
    }
 }
