--- a/net/minecraft/client/renderer/texture/Stitcher.java
+++ b/net/minecraft/client/renderer/texture/Stitcher.java
@@ -13,6 +_,8 @@
 
 @OnlyIn(Dist.CLIENT)
 public class Stitcher {
+   private static final org.apache.logging.log4j.Logger LOGGER = org.apache.logging.log4j.LogManager.getLogger();
+
    private static final Comparator<Stitcher.Holder> f_118161_ = Comparator.<Stitcher.Holder, Integer>comparing((p_118201_) -> {
       return -p_118201_.f_118204_;
    }).thenComparing((p_118199_) -> {
@@ -53,6 +_,12 @@
 
       for(Stitcher.Holder stitcher$holder : list) {
          if (!this.m_118178_(stitcher$holder)) {
+            LOGGER.info(new net.minecraftforge.fml.loading.AdvancedLogMessageAdapter(sb->{
+               sb.append("Unable to fit: ").append(stitcher$holder.f_118202_.m_118431_());
+               sb.append(" - size: ").append(stitcher$holder.f_118202_.m_118434_()).append("x").append(stitcher$holder.f_118202_.m_118437_());
+               sb.append(" - Maybe try a lower resolution resourcepack?\n");
+               list.forEach(h-> sb.append("\t").append(h).append("\n"));
+            }));
             throw new StitcherException(stitcher$holder.f_118202_, list.stream().map((p_118195_) -> {
                return p_118195_.f_118202_;
             }).collect(ImmutableList.toImmutableList()));
@@ -102,7 +_,7 @@
          boolean flag4 = flag2 && j != l;
          boolean flag;
          if (flag3 ^ flag4) {
-            flag = flag3;
+            flag = !flag3 && flag1; // Forge: Fix stitcher not expanding entire height before growing width, and (potentially) growing larger then the max size.
          } else {
             flag = flag1 && i <= j;
          }
@@ -139,8 +_,13 @@
       }
 
       public String toString() {
-         return "Holder{width=" + this.f_118203_ + ", height=" + this.f_118204_ + '}';
+         return "Holder{width=" + this.f_118203_ + ", height=" + this.f_118204_ + ", name=" + this.f_118202_.m_118431_() + '}';
       }
+   }
+
+   @OnlyIn(Dist.CLIENT)
+   public interface SpriteLoader {
+      void m_118228_(TextureAtlasSprite.Info p_118229_, int p_118230_, int p_118231_, int p_118232_, int p_118233_);
    }
 
    @OnlyIn(Dist.CLIENT)
@@ -232,10 +_,5 @@
       public String toString() {
          return "Slot{originX=" + this.f_118209_ + ", originY=" + this.f_118210_ + ", width=" + this.f_118211_ + ", height=" + this.f_118212_ + ", texture=" + this.f_118214_ + ", subSlots=" + this.f_118213_ + '}';
       }
-   }
-
-   @OnlyIn(Dist.CLIENT)
-   public interface SpriteLoader {
-      void m_118228_(TextureAtlasSprite.Info p_118229_, int p_118230_, int p_118231_, int p_118232_, int p_118233_);
    }
 }
