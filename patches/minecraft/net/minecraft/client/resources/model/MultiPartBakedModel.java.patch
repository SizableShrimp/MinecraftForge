--- a/net/minecraft/client/resources/model/MultiPartBakedModel.java
+++ b/net/minecraft/client/resources/model/MultiPartBakedModel.java
@@ -21,7 +_,7 @@
 import org.apache.commons.lang3.tuple.Pair;
 
 @OnlyIn(Dist.CLIENT)
-public class MultiPartBakedModel implements BakedModel {
+public class MultiPartBakedModel implements net.minecraftforge.client.model.data.IDynamicBakedModel {
    private final List<Pair<Predicate<BlockState>, BakedModel>> f_119459_;
    protected final boolean f_119453_;
    protected final boolean f_119454_;
@@ -30,10 +_,12 @@
    protected final ItemTransforms f_119457_;
    protected final ItemOverrides f_119458_;
    private final Map<BlockState, BitSet> f_119460_ = new Object2ObjectOpenCustomHashMap<>(Util.m_137583_());
+   private final BakedModel defaultModel;
 
    public MultiPartBakedModel(List<Pair<Predicate<BlockState>, BakedModel>> p_119462_) {
       this.f_119459_ = p_119462_;
       BakedModel bakedmodel = p_119462_.iterator().next().getRight();
+      this.defaultModel = bakedmodel;
       this.f_119453_ = bakedmodel.m_7541_();
       this.f_119454_ = bakedmodel.m_7539_();
       this.f_119455_ = bakedmodel.m_7547_();
@@ -42,30 +_,31 @@
       this.f_119458_ = bakedmodel.m_7343_();
    }
 
-   public List<BakedQuad> m_6840_(@Nullable BlockState p_119465_, @Nullable Direction p_119466_, Random p_119467_) {
-      if (p_119465_ == null) {
+   // FORGE: Implement our overloads (here and below) so child models can have custom logic 
+   public List<BakedQuad> getQuads(@Nullable BlockState p_200117_1_, @Nullable Direction p_200117_2_, Random p_200117_3_, net.minecraftforge.client.model.data.IModelData modelData) {
+      if (p_200117_1_ == null) {
          return Collections.emptyList();
       } else {
-         BitSet bitset = this.f_119460_.get(p_119465_);
+         BitSet bitset = this.f_119460_.get(p_200117_1_);
          if (bitset == null) {
             bitset = new BitSet();
 
             for(int i = 0; i < this.f_119459_.size(); ++i) {
                Pair<Predicate<BlockState>, BakedModel> pair = this.f_119459_.get(i);
-               if (pair.getLeft().test(p_119465_)) {
+               if (pair.getLeft().test(p_200117_1_)) {
                   bitset.set(i);
                }
             }
 
-            this.f_119460_.put(p_119465_, bitset);
+            this.f_119460_.put(p_200117_1_, bitset);
          }
 
          List<BakedQuad> list = Lists.newArrayList();
-         long k = p_119467_.nextLong();
+         long k = p_200117_3_.nextLong();
 
          for(int j = 0; j < bitset.length(); ++j) {
             if (bitset.get(j)) {
-               list.addAll(this.f_119459_.get(j).getRight().m_6840_(p_119465_, p_119466_, new Random(k)));
+               list.addAll(this.f_119459_.get(j).getRight().getQuads(p_200117_1_, p_200117_2_, new Random(k), net.minecraftforge.client.model.data.MultipartModelData.resolve(this.f_119459_.get(j).getRight(), modelData)));
             }
          }
 
@@ -77,6 +_,10 @@
       return this.f_119453_;
    }
 
+   public boolean isAmbientOcclusion(BlockState state) {
+      return this.defaultModel.isAmbientOcclusion(state);
+   }
+
    public boolean m_7539_() {
       return this.f_119454_;
    }
@@ -89,16 +_,31 @@
       return false;
    }
 
+   @Deprecated
    public TextureAtlasSprite m_6160_() {
       return this.f_119456_;
    }
 
+   public TextureAtlasSprite getParticleTexture(net.minecraftforge.client.model.data.IModelData modelData) {
+      return this.defaultModel.getParticleTexture(modelData);
+   }
+
+   @Deprecated
    public ItemTransforms m_7442_() {
       return this.f_119457_;
    }
 
+   public BakedModel handlePerspective(net.minecraft.client.renderer.block.model.ItemTransforms.TransformType transformType, com.mojang.blaze3d.vertex.PoseStack matrixStack) {
+      return this.defaultModel.handlePerspective(transformType, matrixStack);
+   }
+
    public ItemOverrides m_7343_() {
       return this.f_119458_;
+   }
+
+   @Override
+   public net.minecraftforge.client.model.data.IModelData getModelData(net.minecraft.world.level.BlockAndTintGetter world, net.minecraft.core.BlockPos pos, BlockState state, net.minecraftforge.client.model.data.IModelData tileData) {
+      return net.minecraftforge.client.model.data.MultipartModelData.create(f_119459_, world, pos, state, tileData);
    }
 
    @OnlyIn(Dist.CLIENT)
