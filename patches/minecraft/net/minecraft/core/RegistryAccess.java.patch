--- a/net/minecraft/core/RegistryAccess.java
+++ b/net/minecraft/core/RegistryAccess.java
@@ -92,6 +_,8 @@
       ResourceKey<? extends Registry<E>> resourcekey = p_123074_.m_123108_();
       boolean flag = !resourcekey.equals(Registry.f_122878_) && !resourcekey.equals(Registry.f_122818_);
       Registry<E> registry = f_123049_.m_123090_(resourcekey);
+      if (!resourcekey.equals(Registry.f_122818_))
+         registry = ((Registry<Registry<E>>)BuiltinRegistries.f_123858_).m_6246_((ResourceKey<Registry<E>>)resourcekey);
       WritableRegistry<E> writableregistry = p_123072_.m_123090_(resourcekey);
 
       for(Entry<ResourceKey<E>, E> entry : registry.m_6579_()) {
@@ -196,14 +_,14 @@
 
       private static <K extends ResourceKey<? extends Registry<?>>, V extends MappedRegistry<?>> Codec<RegistryAccess.RegistryHolder> m_123118_(UnboundedMapCodec<K, V> p_123119_) {
          return p_123119_.xmap(RegistryAccess.RegistryHolder::new, (p_123136_) -> {
-            return ((java.util.Set<Map.Entry<K, V>>)(Object)p_123136_.f_123113_.entrySet()).stream().filter((p_123127_) -> {
+            return ((java.util.Set<Map.Entry<K, V>>)(Object)(p_123136_.f_123113_.entrySet())).stream().filter((p_123127_) -> {
                return RegistryAccess.f_123048_.get(p_123127_.getKey()).m_123111_();
             }).collect(ImmutableMap.toImmutableMap(Entry::getKey, Entry::getValue));
          });
       }
 
       private static <E> DataResult<? extends Codec<E>> m_123137_(ResourceKey<? extends Registry<E>> p_123138_) {
-         return Optional.ofNullable((RegistryAccess.RegistryData<E>)RegistryAccess.f_123048_.get(p_123138_)).map((p_123123_) -> {
+         return Optional.ofNullable((RegistryData<E>)RegistryAccess.f_123048_.get(p_123138_)).map((p_123123_) -> {
             return p_123123_.m_123110_();
          }).map(DataResult::success).orElseGet(() -> {
             return DataResult.error("Unknown or not serializable registry: " + p_123138_);
