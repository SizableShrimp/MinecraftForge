--- a/net/minecraft/Util.java
+++ b/net/minecraft/Util.java
@@ -99,8 +_,8 @@
       if (i <= 0) {
          executorservice = MoreExecutors.newDirectExecutorService();
       } else {
-         executorservice = new ForkJoinPool(i, (p_137488_) -> {
-            ForkJoinWorkerThread forkjoinworkerthread = new ForkJoinWorkerThread(p_137488_) {
+         executorservice = new ForkJoinPool(i, (p_240981_1_) -> {
+            ForkJoinWorkerThread forkjoinworkerthread = new ForkJoinWorkerThread(p_240981_1_) {
                protected void onTermination(Throwable p_137590_) {
                   if (p_137590_ != null) {
                      Util.f_137446_.warn("{} died", this.getName(), p_137590_);
@@ -153,8 +_,8 @@
    }
 
    private static ExecutorService m_137586_() {
-      return Executors.newCachedThreadPool((p_137473_) -> {
-         Thread thread = new Thread(p_137473_);
+      return Executors.newCachedThreadPool((p_240978_0_) -> {
+         Thread thread = new Thread(p_240978_0_);
          thread.setName("IO-Worker-" + f_137442_.getAndIncrement());
          thread.setUncaughtExceptionHandler(Util::m_137495_);
          return thread;
@@ -199,7 +_,7 @@
       try {
          type = DataFixers.m_14512_().getSchema(DataFixUtils.makeKey(SharedConstants.m_136187_().getWorldVersion())).getChoiceType(p_137552_, p_137553_);
       } catch (IllegalArgumentException illegalargumentexception) {
-         f_137446_.error("No data fixer registered for {}", (Object)p_137553_);
+         f_137446_.debug("No data fixer registered for {}", (Object)p_137553_);
          if (SharedConstants.f_136183_) {
             throw illegalargumentexception;
          }
@@ -227,8 +_,8 @@
 
    public static Stream<String> m_137582_() {
       RuntimeMXBean runtimemxbean = ManagementFactory.getRuntimeMXBean();
-      return runtimemxbean.getInputArguments().stream().filter((p_137558_) -> {
-         return p_137558_.startsWith("-X");
+      return runtimemxbean.getInputArguments().stream().filter((p_211566_0_) -> {
+         return p_211566_0_.startsWith("-X");
       });
    }
 
@@ -291,19 +_,19 @@
       List<V> list = Lists.newArrayListWithCapacity(p_137568_.size());
       CompletableFuture<?>[] completablefuture = new CompletableFuture[p_137568_.size()];
       CompletableFuture<Void> completablefuture1 = new CompletableFuture<>();
-      p_137568_.forEach((p_137518_) -> {
+      p_137568_.forEach((p_215083_3_) -> {
          int i = list.size();
          list.add((V)null);
-         completablefuture[i] = p_137518_.whenComplete((p_137529_, p_137530_) -> {
-            if (p_137530_ != null) {
-               completablefuture1.completeExceptionally(p_137530_);
+         completablefuture[i] = p_215083_3_.whenComplete((p_215085_3_, p_215085_4_) -> {
+            if (p_215085_4_ != null) {
+               completablefuture1.completeExceptionally(p_215085_4_);
             } else {
-               list.set(i, p_137529_);
+               list.set(i, p_215085_3_);
             }
 
          });
       });
-      return CompletableFuture.allOf(completablefuture).applyToEither(completablefuture1, (p_137513_) -> {
+      return CompletableFuture.allOf(completablefuture).applyToEither(completablefuture1, (p_215089_1_) -> {
          return list;
       });
    }
@@ -481,8 +_,8 @@
    }
 
    public static Consumer<String> m_137489_(String p_137490_, Consumer<String> p_137491_) {
-      return (p_137536_) -> {
-         p_137491_.accept(p_137490_ + p_137536_);
+      return (p_240986_2_) -> {
+         p_137491_.accept(p_137490_ + p_240986_2_);
       };
    }
 
@@ -523,8 +_,8 @@
 
    @OnlyIn(Dist.CLIENT)
    public static String m_137483_(String p_137484_, CharPredicate p_137485_) {
-      return p_137484_.toLowerCase(Locale.ROOT).chars().mapToObj((p_137461_) -> {
-         return p_137485_.m_125854_((char)p_137461_) ? Character.toString((char)p_137461_) : "_";
+      return p_137484_.toLowerCase(Locale.ROOT).chars().mapToObj((p_244360_1_) -> {
+         return p_137485_.m_125854_((char)p_244360_1_) ? Character.toString((char)p_244360_1_) : "_";
       }).collect(Collectors.joining());
    }
 
