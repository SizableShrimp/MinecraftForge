--- a/net/minecraft/data/models/blockstates/MultiVariantGenerator.java
+++ b/net/minecraft/data/models/blockstates/MultiVariantGenerator.java
@@ -28,11 +_,11 @@
    }
 
    public MultiVariantGenerator m_125271_(PropertyDispatch p_125272_) {
-      p_125272_.m_7336_().forEach((p_125263_) -> {
-         if (this.f_125246_.m_49965_().m_61081_(p_125263_.m_61708_()) != p_125263_) {
-            throw new IllegalStateException("Property " + p_125263_ + " is not defined for block " + this.f_125246_);
-         } else if (!this.f_125248_.add(p_125263_)) {
-            throw new IllegalStateException("Values of property " + p_125263_ + " already defined for block " + this.f_125246_);
+      p_125272_.m_7336_().forEach((p_240122_1_) -> {
+         if (this.f_125246_.m_49965_().m_61081_(p_240122_1_.m_61708_()) != p_240122_1_) {
+            throw new IllegalStateException("Property " + p_240122_1_ + " is not defined for block " + this.f_125246_);
+         } else if (!this.f_125248_.add(p_240122_1_)) {
+            throw new IllegalStateException("Values of property " + p_240122_1_ + " already defined for block " + this.f_125246_);
          }
       });
       this.f_125249_.add(p_125272_);
@@ -44,31 +_,31 @@
 
       for(PropertyDispatch propertydispatch : this.f_125249_) {
          Map<Selector, List<Variant>> map = propertydispatch.m_125293_();
-         stream = stream.flatMap((p_125289_) -> {
-            return map.entrySet().stream().map((p_125270_) -> {
-               Selector selector = ((Selector)p_125289_.getFirst()).m_125488_(p_125270_.getKey());
-               List<Variant> list = m_125277_((List)p_125289_.getSecond(), p_125270_.getValue());
+         stream = stream.flatMap((p_240130_1_) -> {
+            return map.entrySet().stream().map((p_240124_1_) -> {
+               Selector selector = ((Selector)p_240130_1_.getFirst()).m_125488_(p_240124_1_.getKey());
+               List<Variant> list = m_125277_((List)p_240130_1_.getSecond(), p_240124_1_.getValue());
                return Pair.of(selector, list);
             });
          });
       }
 
       Map<String, JsonElement> map1 = new TreeMap<>();
-      stream.forEach((p_125285_) -> {
-         JsonElement jsonelement = map1.put(p_125285_.getFirst().m_125492_(), Variant.m_125514_(p_125285_.getSecond()));
+      stream.forEach((p_240129_1_) -> {
+         JsonElement jsonelement = map1.put(p_240129_1_.getFirst().m_125492_(), Variant.m_125514_(p_240129_1_.getSecond()));
       });
       JsonObject jsonobject = new JsonObject();
-      jsonobject.add("variants", Util.m_137469_(new JsonObject(), (p_125282_) -> {
-         map1.forEach(p_125282_::add);
+      jsonobject.add("variants", Util.m_137469_(new JsonObject(), (p_240128_1_) -> {
+         map1.forEach(p_240128_1_::add);
       }));
       return jsonobject;
    }
 
    private static List<Variant> m_125277_(List<Variant> p_125278_, List<Variant> p_125279_) {
       Builder<Variant> builder = ImmutableList.builder();
-      p_125278_.forEach((p_125276_) -> {
-         p_125279_.forEach((p_125267_) -> {
-            builder.add(Variant.m_125508_(p_125276_, p_125267_));
+      p_125278_.forEach((p_240126_2_) -> {
+         p_125279_.forEach((p_240123_2_) -> {
+            builder.add(Variant.m_125508_(p_240126_2_, p_240123_2_));
          });
       });
       return builder.build();
