--- a/net/minecraft/data/models/ModelProvider.java
+++ b/net/minecraft/data/models/ModelProvider.java
@@ -39,32 +_,32 @@
    public void m_6865_(HashCache p_125103_) {
       Path path = this.f_125097_.m_123916_();
       Map<Block, BlockStateGenerator> map = Maps.newHashMap();
-      Consumer<BlockStateGenerator> consumer = (p_125120_) -> {
-         Block block = p_125120_.m_6968_();
-         BlockStateGenerator blockstategenerator = map.put(block, p_125120_);
+      Consumer<BlockStateGenerator> consumer = (p_240085_1_) -> {
+         Block block = p_240085_1_.m_6968_();
+         BlockStateGenerator blockstategenerator = map.put(block, p_240085_1_);
          if (blockstategenerator != null) {
             throw new IllegalStateException("Duplicate blockstate definition for " + block);
          }
       };
       Map<ResourceLocation, Supplier<JsonElement>> map1 = Maps.newHashMap();
       Set<Item> set = Sets.newHashSet();
-      BiConsumer<ResourceLocation, Supplier<JsonElement>> biconsumer = (p_125123_, p_125124_) -> {
-         Supplier<JsonElement> supplier = map1.put(p_125123_, p_125124_);
+      BiConsumer<ResourceLocation, Supplier<JsonElement>> biconsumer = (p_240086_1_, p_240086_2_) -> {
+         Supplier<JsonElement> supplier = map1.put(p_240086_1_, p_240086_2_);
          if (supplier != null) {
-            throw new IllegalStateException("Duplicate model definition for " + p_125123_);
+            throw new IllegalStateException("Duplicate model definition for " + p_240086_1_);
          }
       };
       Consumer<Item> consumer1 = set::add;
       (new BlockModelGenerators(consumer, biconsumer, consumer1)).m_124510_();
       (new ItemModelGenerators(biconsumer)).m_125083_();
-      List<Block> list = Registry.f_122824_.m_123024_().filter((p_125117_) -> {
-         return !map.containsKey(p_125117_);
+      List<Block> list = Registry.f_122824_.m_123024_().filter((p_240084_1_) -> {
+         return !map.containsKey(p_240084_1_);
       }).collect(Collectors.toList());
       if (!list.isEmpty()) {
          throw new IllegalStateException("Missing blockstate definitions for: " + list);
       } else {
-         Registry.f_122824_.forEach((p_125128_) -> {
-            Item item = Item.f_41373_.get(p_125128_);
+         Registry.f_122824_.forEach((p_240087_2_) -> {
+            Item item = Item.f_41373_.get(p_240087_2_);
             if (item != null) {
                if (set.contains(item)) {
                   return;
@@ -72,7 +_,7 @@
 
                ResourceLocation resourcelocation = ModelLocationUtils.m_125571_(item);
                if (!map1.containsKey(resourcelocation)) {
-                  map1.put(resourcelocation, new DelegatedModel(ModelLocationUtils.m_125576_(p_125128_)));
+                  map1.put(resourcelocation, new DelegatedModel(ModelLocationUtils.m_125576_(p_240087_2_)));
                }
             }
 
@@ -83,11 +_,11 @@
    }
 
    private <T> void m_125104_(HashCache p_125105_, Path p_125106_, Map<T, ? extends Supplier<JsonElement>> p_125107_, BiFunction<Path, T, Path> p_125108_) {
-      p_125107_.forEach((p_125133_, p_125134_) -> {
-         Path path = p_125108_.apply(p_125106_, p_125133_);
+      p_125107_.forEach((p_240088_3_, p_240088_4_) -> {
+         Path path = p_125108_.apply(p_125106_, p_240088_3_);
 
          try {
-            DataProvider.m_123920_(f_125096_, p_125105_, p_125134_.get(), path);
+            DataProvider.m_123920_(f_125096_, p_125105_, p_240088_4_.get(), path);
          } catch (Exception exception) {
             f_125095_.error("Couldn't save {}", path, exception);
          }
