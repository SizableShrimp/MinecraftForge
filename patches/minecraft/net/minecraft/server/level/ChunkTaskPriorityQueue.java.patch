--- a/net/minecraft/server/level/ChunkTaskPriorityQueue.java
+++ b/net/minecraft/server/level/ChunkTaskPriorityQueue.java
@@ -16,7 +_,7 @@
 
 public class ChunkTaskPriorityQueue<T> {
    public static final int f_140508_ = ChunkMap.f_140127_ + 2;
-   private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> f_140509_ = IntStream.range(0, f_140508_).mapToObj((p_140520_) -> {
+   private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> f_140509_ = IntStream.range(0, f_140508_).mapToObj((p_219415_0_) -> {
       return new Long2ObjectLinkedOpenHashMap<List<Optional<T>>>();
    }).collect(Collectors.toList());
    private volatile int f_140510_ = f_140508_;
@@ -40,7 +_,7 @@
          }
 
          if (list != null && !list.isEmpty()) {
-            this.f_140509_.get(p_140524_).computeIfAbsent(p_140523_.m_45588_(), (p_140547_) -> {
+            this.f_140509_.get(p_140524_).computeIfAbsent(p_140523_.m_45588_(), (p_219411_0_) -> {
                return Lists.newArrayList();
             }).addAll(list);
             this.f_140510_ = Math.min(this.f_140510_, p_140524_);
@@ -50,7 +_,7 @@
    }
 
    protected void m_140535_(Optional<T> p_140536_, long p_140537_, int p_140538_) {
-      this.f_140509_.get(p_140538_).computeIfAbsent(p_140537_, (p_140545_) -> {
+      this.f_140509_.get(p_140538_).computeIfAbsent(p_140537_, (p_219410_0_) -> {
          return Lists.newArrayList();
       }).add(p_140536_);
       this.f_140510_ = Math.min(this.f_140510_, p_140538_);
@@ -63,8 +_,8 @@
             if (p_140532_) {
                list.clear();
             } else {
-               list.removeIf((p_140534_) -> {
-                  return !p_140534_.isPresent();
+               list.removeIf((p_219413_0_) -> {
+                  return !p_219413_0_.isPresent();
                });
             }
 
@@ -102,8 +_,8 @@
          for(list = long2objectlinkedopenhashmap.removeFirst(); this.f_140510_ < f_140508_ && this.f_140509_.get(this.f_140510_).isEmpty(); ++this.f_140510_) {
          }
 
-         return list.stream().map((p_140529_) -> {
-            return p_140529_.<Either<T, Runnable>>map(Either::left).orElseGet(() -> {
+         return list.stream().map((p_219408_3_) -> {
+            return p_219408_3_.<Either<T, Runnable>>map(Either::left).orElseGet(() -> {
                return Either.right(this.m_140525_(j));
             });
          });
