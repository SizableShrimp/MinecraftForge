--- a/net/minecraft/tags/TagManager.java
+++ b/net/minecraft/tags/TagManager.java
@@ -16,10 +_,11 @@
 import net.minecraft.world.level.material.Fluid;
 
 public class TagManager implements PreparableReloadListener {
-   private final TagLoader<Block> f_13474_ = new TagLoader<>(Registry.f_122824_::m_6612_, "tags/blocks", "block");
-   private final TagLoader<Item> f_13475_ = new TagLoader<>(Registry.f_122827_::m_6612_, "tags/items", "item");
-   private final TagLoader<Fluid> f_13476_ = new TagLoader<>(Registry.f_122822_::m_6612_, "tags/fluids", "fluid");
-   private final TagLoader<EntityType<?>> f_13477_ = new TagLoader<>(Registry.f_122826_::m_6612_, "tags/entity_types", "entity_type");
+   protected TagLoader<Block> f_13474_ = new TagLoader<>(Registry.f_122824_::m_6612_, "tags/blocks", "block");
+   protected TagLoader<Item> f_13475_ = new TagLoader<>(Registry.f_122827_::m_6612_, "tags/items", "item");
+   protected TagLoader<Fluid> f_13476_ = new TagLoader<>(Registry.f_122822_::m_6612_, "tags/fluids", "fluid");
+   protected TagLoader<EntityType<?>> f_13477_ = new TagLoader<>(Registry.f_122826_::m_6612_, "tags/entity_types", "entity_type");
+   protected Map<ResourceLocation, TagLoader<?>> customTagTypeReaders = net.minecraftforge.common.ForgeTagHandler.createCustomTagTypeReaders();
    private TagContainer f_13478_ = TagContainer.f_13420_;
 
    public TagContainer m_13480_() {
@@ -31,11 +_,13 @@
       CompletableFuture<Map<ResourceLocation, Tag.Builder>> completablefuture1 = this.f_13475_.m_13458_(p_13483_, p_13486_);
       CompletableFuture<Map<ResourceLocation, Tag.Builder>> completablefuture2 = this.f_13476_.m_13458_(p_13483_, p_13486_);
       CompletableFuture<Map<ResourceLocation, Tag.Builder>> completablefuture3 = this.f_13477_.m_13458_(p_13483_, p_13486_);
-      return CompletableFuture.allOf(completablefuture, completablefuture1, completablefuture2, completablefuture3).thenCompose(p_13482_::m_6769_).thenAcceptAsync((p_13495_) -> {
+      CompletableFuture<java.util.List<net.minecraftforge.common.ForgeTagHandler.TagCollectionReaderInfo>> customTagTypeResults = net.minecraftforge.common.ForgeTagHandler.getCustomTagTypeReloadResults(p_13483_, p_13486_, customTagTypeReaders);
+      return CompletableFuture.allOf(completablefuture, completablefuture1, completablefuture2, completablefuture3, customTagTypeResults).thenCompose(p_13482_::m_6769_).thenAcceptAsync((p_13495_) -> {
          TagCollection<Block> tagcollection = this.f_13474_.m_13463_(completablefuture.join());
          TagCollection<Item> tagcollection1 = this.f_13475_.m_13463_(completablefuture1.join());
          TagCollection<Fluid> tagcollection2 = this.f_13476_.m_13463_(completablefuture2.join());
          TagCollection<EntityType<?>> tagcollection3 = this.f_13477_.m_13463_(completablefuture3.join());
+         net.minecraftforge.common.ForgeTagHandler.updateCustomTagTypes(customTagTypeResults.join());
          TagContainer tagcontainer = TagContainer.m_13422_(tagcollection, tagcollection1, tagcollection2, tagcollection3);
          Multimap<ResourceLocation, ResourceLocation> multimap = StaticTags.m_13283_(tagcontainer);
          if (!multimap.isEmpty()) {
@@ -43,6 +_,8 @@
                return p_13489_.getKey() + ":" + p_13489_.getValue();
             }).sorted().collect(Collectors.joining(",")));
          } else {
+            tagcontainer = TagContainer.reinjectOptionalTags(tagcontainer);
+            net.minecraftforge.common.ForgeTagHandler.reinjectOptionalTagsCustomTypes();
             SerializationTags.m_13202_(tagcontainer);
             this.f_13478_ = tagcontainer;
          }
