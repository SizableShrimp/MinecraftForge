--- a/net/minecraft/commands/Commands.java
+++ b/net/minecraft/commands/Commands.java
@@ -186,12 +_,13 @@
       if (p_82093_.f_82144_) {
          PublishCommand.m_138184_(this.f_82090_);
       }
+      net.minecraftforge.event.ForgeEventFactory.onCommandRegister(this.f_82090_, p_82093_);
 
-      this.f_82090_.findAmbiguities((p_82108_, p_82109_, p_82110_, p_82111_) -> {
-         f_82089_.warn("Ambiguity between arguments {} and {} with inputs: {}", this.f_82090_.getPath(p_82109_), this.f_82090_.getPath(p_82110_), p_82111_);
+      this.f_82090_.findAmbiguities((p_201302_1_, p_201302_2_, p_201302_3_, p_201302_4_) -> {
+         f_82089_.warn("Ambiguity between arguments {} and {} with inputs: {}", this.f_82090_.getPath(p_201302_2_), this.f_82090_.getPath(p_201302_3_), p_201302_4_);
       });
-      this.f_82090_.setConsumer((p_82104_, p_82105_, p_82106_) -> {
-         p_82104_.getSource().m_81342_(p_82104_, p_82105_, p_82106_);
+      this.f_82090_.setConsumer((p_197058_0_, p_197058_1_, p_197058_2_) -> {
+         p_197058_0_.getSource().m_81342_(p_197058_0_, p_197058_1_, p_197058_2_);
       });
    }
 
@@ -205,7 +_,15 @@
 
       try {
          try {
-            return this.f_82090_.execute(stringreader, p_82118_);
+            ParseResults<CommandSourceStack> parse = this.f_82090_.parse(stringreader, p_82118_);
+            net.minecraftforge.event.CommandEvent event = new net.minecraftforge.event.CommandEvent(parse);
+            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) {
+               if (event.getException() != null) {
+                  com.google.common.base.Throwables.throwIfUnchecked(event.getException());
+               }
+               return 1;
+            }
+            return this.f_82090_.execute(event.getParseResults());
          } catch (CommandRuntimeException commandruntimeexception) {
             p_82118_.m_81352_(commandruntimeexception.m_79226_());
             return 0;
@@ -213,8 +_,8 @@
             p_82118_.m_81352_(ComponentUtils.m_130729_(commandsyntaxexception.getRawMessage()));
             if (commandsyntaxexception.getInput() != null && commandsyntaxexception.getCursor() >= 0) {
                int j = Math.min(commandsyntaxexception.getInput().length(), commandsyntaxexception.getCursor());
-               MutableComponent mutablecomponent1 = (new TextComponent("")).m_130940_(ChatFormatting.GRAY).m_130938_((p_82134_) -> {
-                  return p_82134_.m_131142_(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, p_82119_));
+               MutableComponent mutablecomponent1 = (new TextComponent("")).m_130940_(ChatFormatting.GRAY).m_130938_((p_211705_1_) -> {
+                  return p_211705_1_.m_131142_(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, p_82119_));
                });
                if (j > 10) {
                   mutablecomponent1.m_130946_("...");
@@ -240,8 +_,8 @@
                }
             }
 
-            p_82118_.m_81352_((new TranslatableComponent("command.failed")).m_130938_((p_82137_) -> {
-               return p_82137_.m_131144_(new HoverEvent(HoverEvent.Action.f_130831_, mutablecomponent));
+            p_82118_.m_81352_((new TranslatableComponent("command.failed")).m_130938_((p_211704_1_) -> {
+               return p_211704_1_.m_131144_(new HoverEvent(HoverEvent.Action.f_130831_, mutablecomponent));
             }));
             if (SharedConstants.f_136183_) {
                p_82118_.m_81352_(new TextComponent(Util.m_137575_(exception)));
@@ -268,12 +_,12 @@
    private void m_82112_(CommandNode<CommandSourceStack> p_82113_, CommandNode<SharedSuggestionProvider> p_82114_, CommandSourceStack p_82115_, Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> p_82116_) {
       for(CommandNode<CommandSourceStack> commandnode : p_82113_.getChildren()) {
          if (commandnode.canUse(p_82115_)) {
-            ArgumentBuilder<SharedSuggestionProvider, ?> argumentbuilder = (ArgumentBuilder)commandnode.createBuilder();
-            argumentbuilder.requires((p_82126_) -> {
+            ArgumentBuilder<SharedSuggestionProvider, ?> argumentbuilder = (ArgumentBuilder) commandnode.createBuilder();
+            argumentbuilder.requires((p_197060_0_) -> {
                return true;
             });
             if (argumentbuilder.getCommand() != null) {
-               argumentbuilder.executes((p_82102_) -> {
+               argumentbuilder.executes((p_197053_0_) -> {
                   return 0;
                });
             }
@@ -309,9 +_,9 @@
    }
 
    public static Predicate<String> m_82120_(Commands.ParseFunction p_82121_) {
-      return (p_82124_) -> {
+      return (p_212591_1_) -> {
          try {
-            p_82121_.m_82160_(new StringReader(p_82124_));
+            p_82121_.m_82160_(new StringReader(p_212591_1_));
             return true;
          } catch (CommandSyntaxException commandsyntaxexception) {
             return false;
@@ -337,12 +_,12 @@
    public static void m_82138_() {
       RootCommandNode<CommandSourceStack> rootcommandnode = (new Commands(Commands.CommandSelection.ALL)).m_82094_().getRoot();
       Set<ArgumentType<?>> set = ArgumentTypes.m_121595_(rootcommandnode);
-      Set<ArgumentType<?>> set1 = set.stream().filter((p_82140_) -> {
-         return !ArgumentTypes.m_121593_(p_82140_);
+      Set<ArgumentType<?>> set1 = set.stream().filter((p_242987_0_) -> {
+         return !ArgumentTypes.m_121593_(p_242987_0_);
       }).collect(Collectors.toSet());
       if (!set1.isEmpty()) {
-         f_82089_.warn("Missing type registration for following arguments:\n {}", set1.stream().map((p_82100_) -> {
-            return "\t" + p_82100_;
+         f_82089_.warn("Missing type registration for following arguments:\n {}", set1.stream().map((p_242985_0_) -> {
+            return "\t" + p_242985_0_;
          }).collect(Collectors.joining(",\n")));
          throw new IllegalStateException("Unregistered argument types");
       }
