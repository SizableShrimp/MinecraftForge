--- a/net/minecraft/world/item/crafting/Ingredient.java
+++ b/net/minecraft/world/item/crafting/Ingredient.java
@@ -27,22 +_,28 @@
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.ItemLike;
-import net.minecraftforge.api.distmarker.Dist;
-import net.minecraftforge.api.distmarker.OnlyIn;
-
-public final class Ingredient implements Predicate<ItemStack> {
+
+public class Ingredient implements Predicate<ItemStack> {
+   //Because Mojang caches things... we need to invalidate them.. so... here we go..
+   private static final java.util.Set<Ingredient> INSTANCES = java.util.Collections.newSetFromMap(new java.util.WeakHashMap<Ingredient, Boolean>());
+   public static void invalidateAll() {
+      INSTANCES.stream().filter(e -> e != null).forEach(i -> i.invalidate());
+   }
+
    public static final Ingredient f_43901_ = new Ingredient(Stream.empty());
    private final Ingredient.Value[] f_43902_;
    private ItemStack[] f_43903_;
    private IntList f_43904_;
+   private final boolean isSimple;
 
-   private Ingredient(Stream<? extends Ingredient.Value> p_43907_) {
-      this.f_43902_ = p_43907_.toArray((p_43933_) -> {
-         return new Ingredient.Value[p_43933_];
+   protected Ingredient(Stream<? extends Ingredient.Value> p_43907_) {
+      this.f_43902_ = p_43907_.toArray((p_209360_0_) -> {
+         return new Ingredient.Value[p_209360_0_];
       });
+      this.isSimple = !net.minecraftforge.fml.DatagenModLoader.isRunningDataGen() && !Arrays.stream(f_43902_).anyMatch(list -> list.m_6223_().stream().anyMatch(stack -> stack.m_41720_().isDamageable(stack)));
+      Ingredient.INSTANCES.add(this);
    }
 
-   @OnlyIn(Dist.CLIENT)
    public ItemStack[] m_43908_() {
       this.m_43948_();
       return this.f_43903_;
@@ -50,10 +_,10 @@
 
    private void m_43948_() {
       if (this.f_43903_ == null) {
-         this.f_43903_ = Arrays.stream(this.f_43902_).flatMap((p_43916_) -> {
-            return p_43916_.m_6223_().stream();
-         }).distinct().toArray((p_43910_) -> {
-            return new ItemStack[p_43910_];
+         this.f_43903_ = Arrays.stream(this.f_43902_).flatMap((p_209359_0_) -> {
+            return p_209359_0_.m_6223_().stream();
+         }).distinct().toArray((p_209358_0_) -> {
+            return new ItemStack[p_209358_0_];
          });
       }
 
@@ -93,8 +_,12 @@
       return this.f_43904_;
    }
 
-   public void m_43923_(FriendlyByteBuf p_43924_) {
+   public final void m_43923_(FriendlyByteBuf p_43924_) {
       this.m_43948_();
+      if (!this.isVanilla()) {
+         net.minecraftforge.common.crafting.CraftingHelper.write(p_43924_, this);
+         return;
+      }
       p_43924_.m_130130_(this.f_43903_.length);
 
       for(int i = 0; i < this.f_43903_.length; ++i) {
@@ -121,7 +_,26 @@
       return this.f_43902_.length == 0 && (this.f_43903_ == null || this.f_43903_.length == 0) && (this.f_43904_ == null || this.f_43904_.isEmpty());
    }
 
-   private static Ingredient m_43938_(Stream<? extends Ingredient.Value> p_43939_) {
+   protected void invalidate() {
+      this.f_43903_ = null;
+      this.f_43904_ = null;
+   }
+
+   public boolean isSimple() {
+      return isSimple || this == f_43901_;
+   }
+
+   private final boolean isVanilla = this.getClass() == Ingredient.class;
+   public final boolean isVanilla() {
+       return isVanilla;
+   }
+
+   public net.minecraftforge.common.crafting.IIngredientSerializer<? extends Ingredient> getSerializer() {
+      if (!isVanilla()) throw new IllegalStateException("Modders must implement Ingredient.getSerializer in their custom Ingredients: " + this);
+      return net.minecraftforge.common.crafting.VanillaIngredientSerializer.INSTANCE;
+   }
+
+   public static Ingredient m_43938_(Stream<? extends Ingredient.Value> p_43939_) {
       Ingredient ingredient = new Ingredient(p_43939_);
       return ingredient.f_43902_.length == 0 ? f_43901_ : ingredient;
    }
@@ -130,16 +_,15 @@
       return m_43921_(Arrays.stream(p_43930_).map(ItemStack::new));
    }
 
-   @OnlyIn(Dist.CLIENT)
    public static Ingredient m_43927_(ItemStack... p_43928_) {
       return m_43921_(Arrays.stream(p_43928_));
    }
 
    public static Ingredient m_43921_(Stream<ItemStack> p_43922_) {
-      return m_43938_(p_43922_.filter((p_43944_) -> {
-         return !p_43944_.m_41619_();
-      }).map((p_43935_) -> {
-         return new Ingredient.ItemValue(p_43935_);
+      return m_43938_(p_43922_.filter((p_234824_0_) -> {
+         return !p_234824_0_.m_41619_();
+      }).map((p_209356_0_) -> {
+         return new Ingredient.ItemValue(p_209356_0_);
       }));
    }
 
@@ -149,6 +_,9 @@
 
    public static Ingredient m_43940_(FriendlyByteBuf p_43941_) {
       int i = p_43941_.m_130242_();
+      if (i == -1) {
+         return net.minecraftforge.common.crafting.CraftingHelper.getIngredient(p_43941_.m_130281_(), p_43941_);
+      }
       return m_43938_(Stream.generate(() -> {
          return new Ingredient.ItemValue(p_43941_.m_130267_());
       }).limit((long)i));
@@ -156,6 +_,8 @@
 
    public static Ingredient m_43917_(@Nullable JsonElement p_43918_) {
       if (p_43918_ != null && !p_43918_.isJsonNull()) {
+         Ingredient ret = net.minecraftforge.common.crafting.CraftingHelper.getIngredient(p_43918_);
+         if (ret != null) return ret;
          if (p_43918_.isJsonObject()) {
             return m_43938_(Stream.of(m_43919_(p_43918_.getAsJsonObject())));
          } else if (p_43918_.isJsonArray()) {
@@ -163,8 +_,8 @@
             if (jsonarray.size() == 0) {
                throw new JsonSyntaxException("Item array cannot be empty, at least one item must be defined");
             } else {
-               return m_43938_(StreamSupport.stream(jsonarray.spliterator(), false).map((p_43937_) -> {
-                  return m_43919_(GsonHelper.m_13918_(p_43937_, "item"));
+               return m_43938_(StreamSupport.stream(jsonarray.spliterator(), false).map((p_209355_0_) -> {
+                  return m_43919_(GsonHelper.m_13918_(p_209355_0_, "item"));
                }));
             }
          } else {
@@ -175,7 +_,7 @@
       }
    }
 
-   private static Ingredient.Value m_43919_(JsonObject p_43920_) {
+   public static Ingredient.Value m_43919_(JsonObject p_43920_) {
       if (p_43920_.has("item") && p_43920_.has("tag")) {
          throw new JsonParseException("An ingredient entry is either a tag or an item, not both");
       } else if (p_43920_.has("item")) {
@@ -197,10 +_,22 @@
       }
    }
 
-   static class ItemValue implements Ingredient.Value {
+   //Merges several vanilla Ingredients together. As a quirk of how the json is structured, we can't tell if its a single Ingredient type or multiple so we split per item and re-merge here.
+   //Only public for internal use, so we can access a private field in here.
+   public static Ingredient merge(Collection<Ingredient> parts) {
+      return m_43938_(parts.stream().flatMap(i -> Arrays.stream(i.f_43902_)));
+   }
+
+   public interface Value {
+      Collection<ItemStack> m_6223_();
+
+      JsonObject m_6544_();
+   }
+
+   public static class ItemValue implements Ingredient.Value {
       private final ItemStack f_43951_;
 
-      private ItemValue(ItemStack p_43953_) {
+      public ItemValue(ItemStack p_43953_) {
          this.f_43951_ = p_43953_;
       }
 
@@ -215,10 +_,10 @@
       }
    }
 
-   static class TagValue implements Ingredient.Value {
+   public static class TagValue implements Ingredient.Value {
       private final Tag<Item> f_43959_;
 
-      private TagValue(Tag<Item> p_43961_) {
+      public TagValue(Tag<Item> p_43961_) {
          this.f_43959_ = p_43961_;
       }
 
@@ -229,6 +_,9 @@
             list.add(new ItemStack(item));
          }
 
+         if (list.size() == 0 && !net.minecraftforge.common.ForgeConfig.SERVER.treatEmptyTagsAsAir.get()) {
+            list.add(new ItemStack(net.minecraft.world.level.block.Blocks.f_50375_).m_41714_(new net.minecraft.network.chat.TextComponent("Empty Tag: " + SerializationTags.m_13199_().m_5881_().m_13407_(this.f_43959_).toString())));
+         }
          return list;
       }
 
@@ -237,11 +_,5 @@
          jsonobject.addProperty("tag", SerializationTags.m_13199_().m_5881_().m_13407_(this.f_43959_).toString());
          return jsonobject;
       }
-   }
-
-   interface Value {
-      Collection<ItemStack> m_6223_();
-
-      JsonObject m_6544_();
    }
 }
