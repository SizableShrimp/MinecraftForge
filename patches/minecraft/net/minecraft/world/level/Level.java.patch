--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -42,7 +_,6 @@
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.entity.BlockEntity;
-import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.block.entity.TickableBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.border.WorldBorder;
@@ -65,7 +_,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class Level implements LevelAccessor, AutoCloseable {
+public abstract class Level extends net.minecraftforge.common.capabilities.CapabilityProvider<Level> implements LevelAccessor, AutoCloseable, net.minecraftforge.common.extensions.IForgeWorld {
    protected static final Logger f_46426_ = LogManager.getLogger();
    public static final Codec<ResourceKey<Level>> f_46427_ = ResourceLocation.f_135803_.xmap(ResourceKey.m_135797_(Registry.f_122819_), ResourceKey::m_135782_);
    public static final ResourceKey<Level> f_46428_ = ResourceKey.m_135785_(Registry.f_122819_, new ResourceLocation("overworld"));
@@ -75,16 +_,16 @@
    public final List<BlockEntity> f_46431_ = Lists.newArrayList();
    public final List<BlockEntity> f_46432_ = Lists.newArrayList();
    protected final List<BlockEntity> f_46433_ = Lists.newArrayList();
-   protected final List<BlockEntity> f_46434_ = Lists.newArrayList();
+   protected final java.util.Set<BlockEntity> f_46434_ = java.util.Collections.newSetFromMap(new java.util.IdentityHashMap<>()); // Forge: faster "contains" makes removal much more efficient
    private final Thread f_46423_;
    private final boolean f_46424_;
    private int f_46425_;
    protected int f_46435_ = (new Random()).nextInt();
    protected final int f_46436_ = 1013904223;
-   protected float f_46437_;
-   protected float f_46438_;
-   protected float f_46439_;
-   protected float f_46440_;
+   public float f_46437_;
+   public float f_46438_;
+   public float f_46439_;
+   public float f_46440_;
    public final Random f_46441_ = new Random();
    private final DimensionType f_46445_;
    protected final WritableLevelData f_46442_;
@@ -94,8 +_,12 @@
    private final WorldBorder f_46447_;
    private final BiomeManager f_46420_;
    private final ResourceKey<Level> f_46421_;
+   public boolean restoringBlockSnapshots = false;
+   public boolean captureBlockSnapshots = false;
+   public java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot> capturedBlockSnapshots = new java.util.ArrayList<>();
 
    protected Level(WritableLevelData p_46450_, ResourceKey<Level> p_46451_, final DimensionType p_46452_, Supplier<ProfilerFiller> p_46453_, boolean p_46454_, boolean p_46455_, long p_46456_) {
+      super(Level.class);
       this.f_46446_ = p_46453_;
       this.f_46442_ = p_46450_;
       this.f_46445_ = p_46452_;
@@ -182,48 +_,74 @@
       } else {
          LevelChunk levelchunk = this.m_46745_(p_46605_);
          Block block = p_46606_.m_60734_();
+
+         p_46605_ = p_46605_.m_7949_(); // Forge - prevent mutable BlockPos leaks
+         net.minecraftforge.common.util.BlockSnapshot blockSnapshot = null;
+         if (this.captureBlockSnapshots && !this.f_46443_) {
+             blockSnapshot = net.minecraftforge.common.util.BlockSnapshot.create(this.f_46421_, this, p_46605_, p_46607_);
+             this.capturedBlockSnapshots.add(blockSnapshot);
+         }
+
+         BlockState old = m_8055_(p_46605_);
+         int oldLight = old.getLightValue(this, p_46605_);
+         int oldOpacity = old.m_60739_(this, p_46605_);
+
          BlockState blockstate = levelchunk.m_6978_(p_46605_, p_46606_, (p_46607_ & 64) != 0);
          if (blockstate == null) {
+            if (blockSnapshot != null) this.capturedBlockSnapshots.remove(blockSnapshot);
             return false;
          } else {
             BlockState blockstate1 = this.m_8055_(p_46605_);
-            if ((p_46607_ & 128) == 0 && blockstate1 != blockstate && (blockstate1.m_60739_(this, p_46605_) != blockstate.m_60739_(this, p_46605_) || blockstate1.m_60791_() != blockstate.m_60791_() || blockstate1.m_60787_() || blockstate.m_60787_())) {
+            if ((p_46607_ & 128) == 0 && blockstate1 != blockstate && (blockstate1.m_60739_(this, p_46605_) != oldOpacity || blockstate1.getLightValue(this, p_46605_) != oldLight || blockstate1.m_60787_() || blockstate.m_60787_())) {
                this.m_46473_().m_6180_("queueCheckLight");
                this.m_7726_().m_7827_().m_7174_(p_46605_);
                this.m_46473_().m_7238_();
             }
 
-            if (blockstate1 == p_46606_) {
-               if (blockstate != blockstate1) {
-                  this.m_6550_(p_46605_, blockstate, blockstate1);
-               }
-
-               if ((p_46607_ & 2) != 0 && (!this.f_46443_ || (p_46607_ & 4) == 0) && (this.f_46443_ || levelchunk.m_6708_() != null && levelchunk.m_6708_().m_140114_(ChunkHolder.FullChunkStatus.TICKING))) {
-                  this.m_7260_(p_46605_, blockstate, p_46606_, p_46607_);
-               }
-
-               if ((p_46607_ & 1) != 0) {
-                  this.m_6289_(p_46605_, blockstate.m_60734_());
-                  if (!this.f_46443_ && p_46606_.m_60807_()) {
-                     this.m_46717_(p_46605_, block);
-                  }
-               }
-
-               if ((p_46607_ & 16) == 0 && p_46608_ > 0) {
-                  int i = p_46607_ & -34;
-                  blockstate.m_60762_(this, p_46605_, i, p_46608_ - 1);
-                  p_46606_.m_60705_(this, p_46605_, i, p_46608_ - 1);
-                  p_46606_.m_60762_(this, p_46605_, i, p_46608_ - 1);
-               }
-
-               this.m_6559_(p_46605_, blockstate, blockstate1);
+            if (blockSnapshot == null) { // Don't notify clients or update physics while capturing blockstates
+               this.markAndNotifyBlock(p_46605_, levelchunk, blockstate, p_46606_, p_46607_, p_46608_);
             }
-
             return true;
          }
       }
    }
 
+   // Split off from original setBlockState(BlockPos, BlockState, int, int) method in order to directly send client and physic updates
+   public void markAndNotifyBlock(BlockPos p_241211_1_, @Nullable LevelChunk chunk, BlockState blockstate, BlockState p_241211_2_, int p_241211_3_, int p_241211_4_)
+   {
+       Block block = p_241211_2_.m_60734_();
+       BlockState blockstate1 = m_8055_(p_241211_1_);
+       {
+           {
+            if (blockstate1 == p_241211_2_) {
+               if (blockstate != blockstate1) {
+                  this.m_6550_(p_241211_1_, blockstate, blockstate1);
+               }
+
+               if ((p_241211_3_ & 2) != 0 && (!this.f_46443_ || (p_241211_3_ & 4) == 0) && (this.f_46443_ || chunk.m_6708_() != null && chunk.m_6708_().m_140114_(ChunkHolder.FullChunkStatus.TICKING))) {
+                  this.m_7260_(p_241211_1_, blockstate, p_241211_2_, p_241211_3_);
+               }
+
+               if ((p_241211_3_ & 1) != 0) {
+                  this.m_6289_(p_241211_1_, blockstate.m_60734_());
+                  if (!this.f_46443_ && p_241211_2_.m_60807_()) {
+                     this.m_46717_(p_241211_1_, block);
+                  }
+               }
+
+               if ((p_241211_3_ & 16) == 0 && p_241211_4_ > 0) {
+                  int i = p_241211_3_ & -34;
+                  blockstate.m_60762_(this, p_241211_1_, i, p_241211_4_ - 1);
+                  p_241211_2_.m_60705_(this, p_241211_1_, i, p_241211_4_ - 1);
+                  p_241211_2_.m_60762_(this, p_241211_1_, i, p_241211_4_ - 1);
+               }
+
+               this.m_6559_(p_241211_1_, blockstate, blockstate1);
+            }
+         }
+      }
+   }
+
    public void m_6559_(BlockPos p_46609_, BlockState p_46610_, BlockState p_46611_) {
    }
 
@@ -234,7 +_,7 @@
 
    public boolean m_7740_(BlockPos p_46626_, boolean p_46627_, @Nullable Entity p_46628_, int p_46629_) {
       BlockState blockstate = this.m_8055_(p_46626_);
-      if (blockstate.m_60795_()) {
+      if (blockstate.isAir(this, p_46626_)) {
          return false;
       } else {
          FluidState fluidstate = this.m_6425_(p_46626_);
@@ -243,7 +_,7 @@
          }
 
          if (p_46627_) {
-            BlockEntity blockentity = blockstate.m_60734_().m_60588_() ? this.m_7702_(p_46626_) : null;
+            BlockEntity blockentity = blockstate.hasTileEntity() ? this.m_7702_(p_46626_) : null;
             Block.m_49881_(blockstate, this, p_46626_, blockentity, p_46628_, ItemStack.f_41583_);
          }
 
@@ -261,6 +_,8 @@
    }
 
    public void m_46672_(BlockPos p_46673_, Block p_46674_) {
+      if (net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_46673_, this.m_8055_(p_46673_), java.util.EnumSet.allOf(Direction.class), false).isCanceled())
+         return;
       this.m_46586_(p_46673_.m_122024_(), p_46674_, p_46673_);
       this.m_46586_(p_46673_.m_122029_(), p_46674_, p_46673_);
       this.m_46586_(p_46673_.m_7495_(), p_46674_, p_46673_);
@@ -270,6 +_,11 @@
    }
 
    public void m_46590_(BlockPos p_46591_, Block p_46592_, Direction p_46593_) {
+      java.util.EnumSet<Direction> directions = java.util.EnumSet.allOf(Direction.class);
+      directions.remove(p_46593_);
+      if (net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_46591_, this.m_8055_(p_46591_), directions, false).isCanceled())
+         return;
+
       if (p_46593_ != Direction.WEST) {
          this.m_46586_(p_46591_.m_122024_(), p_46592_, p_46591_);
       }
@@ -307,9 +_,9 @@
             CrashReportCategory crashreportcategory = crashreport.m_127514_("Block being updated");
             crashreportcategory.m_128165_("Source block type", () -> {
                try {
-                  return String.format("ID #%s (%s // %s)", Registry.f_122824_.m_7981_(p_46588_), p_46588_.m_7705_(), p_46588_.getClass().getCanonicalName());
+                  return String.format("ID #%s (%s // %s)", p_46588_.getRegistryName(), p_46588_.m_7705_(), p_46588_.getClass().getCanonicalName());
                } catch (Throwable throwable1) {
-                  return "ID #" + Registry.f_122824_.m_7981_(p_46588_);
+                  return "ID #" + p_46588_.getRegistryName();
                }
             });
             CrashReportCategory.m_128170_(crashreportcategory, p_46587_, blockstate);
@@ -393,10 +_,12 @@
    }
 
    public boolean m_46568_(BlockEntity p_46569_) {
+      if (p_46569_.m_7642_() != this) p_46569_.m_58865_(this, p_46569_.m_58899_()); // Forge - set the world early as vanilla doesn't set it until next tick
       if (this.f_46444_) {
          f_46426_.error("Adding block entity while ticking: {} @ {}", () -> {
             return Registry.f_122830_.m_7981_(p_46569_.m_58903_());
          }, p_46569_::m_58899_);
+         return f_46433_.add(p_46569_); // Forge: wait to add new TE if we're currently processing existing ones
       }
 
       boolean flag = this.f_46431_.add(p_46569_);
@@ -404,6 +_,8 @@
          this.f_46432_.add(p_46569_);
       }
 
+      p_46569_.onLoad();
+
       if (this.f_46443_) {
          BlockPos blockpos = p_46569_.m_58899_();
          BlockState blockstate = this.m_8055_(blockpos);
@@ -415,6 +_,7 @@
 
    public void m_46651_(Collection<BlockEntity> p_46652_) {
       if (this.f_46444_) {
+         p_46652_.stream().filter(te -> te.m_7642_() != this).forEach(te -> te.m_58865_(this, te.m_58899_())); // Forge - set the world early as vanilla doesn't set it until next tick
          this.f_46433_.addAll(p_46652_);
       } else {
          for(BlockEntity blockentity : p_46652_) {
@@ -427,13 +_,14 @@
    public void m_46463_() {
       ProfilerFiller profilerfiller = this.m_46473_();
       profilerfiller.m_6180_("blockEntities");
+      this.f_46444_ = true;// Forge: Move above remove to prevent CMEs
       if (!this.f_46434_.isEmpty()) {
+         this.f_46434_.forEach(e -> e.onChunkUnloaded());
          this.f_46432_.removeAll(this.f_46434_);
          this.f_46431_.removeAll(this.f_46434_);
          this.f_46434_.clear();
       }
 
-      this.f_46444_ = true;
       Iterator<BlockEntity> iterator = this.f_46432_.iterator();
 
       while(iterator.hasNext()) {
@@ -442,8 +_,9 @@
             BlockPos blockpos = blockentity.m_58899_();
             if (this.m_7726_().m_8104_(blockpos) && this.m_6857_().m_61937_(blockpos)) {
                try {
+                  net.minecraftforge.server.timings.TimeTracker.TILE_ENTITY_UPDATE.trackStart(blockentity);
                   profilerfiller.m_6521_(() -> {
-                     return String.valueOf((Object)BlockEntityType.m_58954_(blockentity.m_58903_()));
+                     return String.valueOf(blockentity.m_58903_().getRegistryName());
                   });
                   if (blockentity.m_58903_().m_58952_(this.m_8055_(blockpos).m_60734_())) {
                      ((TickableBlockEntity)blockentity).m_7290_();
@@ -456,8 +_,16 @@
                   CrashReport crashreport = CrashReport.m_127521_(throwable, "Ticking block entity");
                   CrashReportCategory crashreportcategory = crashreport.m_127514_("Block entity being ticked");
                   blockentity.m_58886_(crashreportcategory);
+                  if (net.minecraftforge.common.ForgeConfig.SERVER.removeErroringTileEntities.get()) {
+                     LogManager.getLogger().fatal("{}", crashreport.m_127526_());
+                     blockentity.m_7651_();
+                     this.m_46747_(blockentity.m_58899_());
+                  } else
                   throw new ReportedException(crashreport);
                }
+               finally {
+                  net.minecraftforge.server.timings.TimeTracker.TILE_ENTITY_UPDATE.trackEnd(blockentity);
+               }
             }
          }
 
@@ -465,7 +_,10 @@
             iterator.remove();
             this.f_46431_.remove(blockentity);
             if (this.m_46805_(blockentity.m_58899_())) {
-               this.m_46745_(blockentity.m_58899_()).m_8114_(blockentity.m_58899_());
+               //Forge: Bugfix: If we set the tile entity it immediately sets it in the chunk, so we could be desyned
+               LevelChunk levelchunk = this.m_46745_(blockentity.m_58899_());
+               if (levelchunk.m_5685_(blockentity.m_58899_(), LevelChunk.EntityCreationType.CHECK) == blockentity)
+                  levelchunk.m_8114_(blockentity.m_58899_());
             }
          }
       }
@@ -497,12 +_,15 @@
 
    public void m_46653_(Consumer<Entity> p_46654_, Entity p_46655_) {
       try {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackStart(p_46655_);
          p_46654_.accept(p_46655_);
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.m_127521_(throwable, "Ticking entity");
          CrashReportCategory crashreportcategory = crashreport.m_127514_("Entity being ticked");
          p_46655_.m_7976_(crashreportcategory);
          throw new ReportedException(crashreport);
+      } finally {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackEnd(p_46655_);
       }
    }
 
@@ -516,6 +_,7 @@
 
    public Explosion m_7703_(@Nullable Entity p_46526_, @Nullable DamageSource p_46527_, @Nullable ExplosionDamageCalculator p_46528_, double p_46529_, double p_46530_, double p_46531_, float p_46532_, boolean p_46533_, Explosion.BlockInteraction p_46534_) {
       Explosion explosion = new Explosion(this, p_46526_, p_46527_, p_46528_, p_46529_, p_46530_, p_46531_, p_46532_, p_46533_, p_46534_);
+      if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
       explosion.m_46061_();
       explosion.m_46075_(true);
       return explosion;
@@ -563,6 +_,7 @@
 
    public void m_46594_(BlockPos p_46595_, @Nullable BlockEntity p_46596_) {
       if (!m_46743_(p_46595_)) {
+         p_46595_ = p_46595_.m_7949_(); // Forge - prevent mutable BlockPos leaks
          if (p_46596_ != null && !p_46596_.m_58901_()) {
             if (this.f_46444_) {
                p_46596_.m_58865_(this, p_46595_);
@@ -578,7 +_,8 @@
 
                this.f_46433_.add(p_46596_);
             } else {
-               this.m_46745_(p_46595_).m_7460_(p_46595_, p_46596_);
+               LevelChunk levelchunk = this.m_46745_(p_46595_);
+               if (levelchunk != null) levelchunk.m_7460_(p_46595_, p_46596_);
                this.m_46568_(p_46596_);
             }
          }
@@ -591,6 +_,8 @@
       if (blockentity != null && this.f_46444_) {
          blockentity.m_7651_();
          this.f_46433_.remove(blockentity);
+         if (!(blockentity instanceof TickableBlockEntity)) //Forge: If they are not tickable they wont be removed in the update loop.
+            this.f_46431_.remove(blockentity);
       } else {
          if (blockentity != null) {
             this.f_46433_.remove(blockentity);
@@ -600,7 +_,7 @@
 
          this.m_46745_(p_46748_).m_8114_(p_46748_);
       }
-
+      this.m_46717_(p_46748_, m_8055_(p_46748_).m_60734_()); //Notify neighbors of changes
    }
 
    public boolean m_46749_(BlockPos p_46750_) {
@@ -653,10 +_,10 @@
    public List<Entity> m_6249_(@Nullable Entity p_46536_, AABB p_46537_, @Nullable Predicate<? super Entity> p_46538_) {
       this.m_46473_().m_6174_("getEntities");
       List<Entity> list = Lists.newArrayList();
-      int i = Mth.m_14107_((p_46537_.f_82288_ - 2.0D) / 16.0D);
-      int j = Mth.m_14107_((p_46537_.f_82291_ + 2.0D) / 16.0D);
-      int k = Mth.m_14107_((p_46537_.f_82290_ - 2.0D) / 16.0D);
-      int l = Mth.m_14107_((p_46537_.f_82293_ + 2.0D) / 16.0D);
+      int i = Mth.m_14107_((p_46537_.f_82288_ - getMaxEntityRadius()) / 16.0D);
+      int j = Mth.m_14107_((p_46537_.f_82291_ + getMaxEntityRadius()) / 16.0D);
+      int k = Mth.m_14107_((p_46537_.f_82290_ - getMaxEntityRadius()) / 16.0D);
+      int l = Mth.m_14107_((p_46537_.f_82293_ + getMaxEntityRadius()) / 16.0D);
       ChunkSource chunksource = this.m_7726_();
 
       for(int i1 = i; i1 <= j; ++i1) {
@@ -673,10 +_,10 @@
 
    public <T extends Entity> List<T> m_46539_(@Nullable EntityType<T> p_46540_, AABB p_46541_, Predicate<? super T> p_46542_) {
       this.m_46473_().m_6174_("getEntities");
-      int i = Mth.m_14107_((p_46541_.f_82288_ - 2.0D) / 16.0D);
-      int j = Mth.m_14165_((p_46541_.f_82291_ + 2.0D) / 16.0D);
-      int k = Mth.m_14107_((p_46541_.f_82290_ - 2.0D) / 16.0D);
-      int l = Mth.m_14165_((p_46541_.f_82293_ + 2.0D) / 16.0D);
+      int i = Mth.m_14107_((p_46541_.f_82288_ - getMaxEntityRadius()) / 16.0D);
+      int j = Mth.m_14165_((p_46541_.f_82291_ + getMaxEntityRadius()) / 16.0D);
+      int k = Mth.m_14107_((p_46541_.f_82290_ - getMaxEntityRadius()) / 16.0D);
+      int l = Mth.m_14165_((p_46541_.f_82293_ + getMaxEntityRadius()) / 16.0D);
       List<T> list = Lists.newArrayList();
 
       for(int i1 = i; i1 < j; ++i1) {
@@ -693,10 +_,10 @@
 
    public <T extends Entity> List<T> m_6443_(Class<? extends T> p_46647_, AABB p_46648_, @Nullable Predicate<? super T> p_46649_) {
       this.m_46473_().m_6174_("getEntities");
-      int i = Mth.m_14107_((p_46648_.f_82288_ - 2.0D) / 16.0D);
-      int j = Mth.m_14165_((p_46648_.f_82291_ + 2.0D) / 16.0D);
-      int k = Mth.m_14107_((p_46648_.f_82290_ - 2.0D) / 16.0D);
-      int l = Mth.m_14165_((p_46648_.f_82293_ + 2.0D) / 16.0D);
+      int i = Mth.m_14107_((p_46648_.f_82288_ - getMaxEntityRadius()) / 16.0D);
+      int j = Mth.m_14165_((p_46648_.f_82291_ + getMaxEntityRadius()) / 16.0D);
+      int k = Mth.m_14107_((p_46648_.f_82290_ - getMaxEntityRadius()) / 16.0D);
+      int l = Mth.m_14165_((p_46648_.f_82293_ + getMaxEntityRadius()) / 16.0D);
       List<T> list = Lists.newArrayList();
       ChunkSource chunksource = this.m_7726_();
 
@@ -714,10 +_,10 @@
 
    public <T extends Entity> List<T> m_6444_(Class<? extends T> p_46700_, AABB p_46701_, @Nullable Predicate<? super T> p_46702_) {
       this.m_46473_().m_6174_("getLoadedEntities");
-      int i = Mth.m_14107_((p_46701_.f_82288_ - 2.0D) / 16.0D);
-      int j = Mth.m_14165_((p_46701_.f_82291_ + 2.0D) / 16.0D);
-      int k = Mth.m_14107_((p_46701_.f_82290_ - 2.0D) / 16.0D);
-      int l = Mth.m_14165_((p_46701_.f_82293_ + 2.0D) / 16.0D);
+      int i = Mth.m_14107_((p_46701_.f_82288_ - getMaxEntityRadius()) / 16.0D);
+      int j = Mth.m_14165_((p_46701_.f_82291_ + getMaxEntityRadius()) / 16.0D);
+      int k = Mth.m_14107_((p_46701_.f_82290_ - getMaxEntityRadius()) / 16.0D);
+      int l = Mth.m_14165_((p_46701_.f_82293_ + getMaxEntityRadius()) / 16.0D);
       List<T> list = Lists.newArrayList();
       ChunkSource chunksource = this.m_7726_();
 
@@ -741,6 +_,7 @@
          this.m_46745_(p_46676_).m_6427_();
       }
 
+      this.m_46717_(p_46676_, m_8055_(p_46676_).m_60734_()); //Notify neighbors of changes
    }
 
    public int m_5736_() {
@@ -785,7 +_,7 @@
    public int m_46681_(BlockPos p_46682_, Direction p_46683_) {
       BlockState blockstate = this.m_8055_(p_46682_);
       int i = blockstate.m_60746_(this, p_46682_, p_46683_);
-      return blockstate.m_60796_(this, p_46682_) ? Math.max(i, this.m_46751_(p_46682_)) : i;
+      return blockstate.shouldCheckWeakPower(this, p_46682_, p_46683_) ? Math.max(i, this.m_46751_(p_46682_)) : i;
    }
 
    public boolean m_46753_(BlockPos p_46754_) {
@@ -940,16 +_,15 @@
    public abstract Scoreboard m_6188_();
 
    public void m_46717_(BlockPos p_46718_, Block p_46719_) {
-      for(Direction direction : Direction.Plane.HORIZONTAL) {
+      for(Direction direction : Direction.values()) {
          BlockPos blockpos = p_46718_.m_121945_(direction);
          if (this.m_46805_(blockpos)) {
             BlockState blockstate = this.m_8055_(blockpos);
-            if (blockstate.m_60713_(Blocks.f_50328_)) {
-               blockstate.m_60690_(this, blockpos, p_46719_, p_46718_, false);
-            } else if (blockstate.m_60796_(this, blockpos)) {
+            blockstate.onNeighborChange(this, blockpos, p_46718_);
+            if (blockstate.m_60796_(this, blockpos)) {
                blockpos = blockpos.m_121945_(direction);
                blockstate = this.m_8055_(blockpos);
-               if (blockstate.m_60713_(Blocks.f_50328_)) {
+               if (blockstate.getWeakChanges(this, blockpos)) {
                   blockstate.m_60690_(this, blockpos, p_46719_, p_46718_, false);
                }
             }
@@ -1024,6 +_,18 @@
 
    public BiomeManager m_7062_() {
       return this.f_46420_;
+   }
+
+   private double maxEntityRadius = 2.0D;
+   @Override
+   public double getMaxEntityRadius() {
+      return maxEntityRadius;
+   }
+   @Override
+   public double increaseMaxEntityRadius(double value) {
+      if (value > maxEntityRadius)
+         maxEntityRadius = value;
+      return maxEntityRadius;
    }
 
    public final boolean m_46659_() {
