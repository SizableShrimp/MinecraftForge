--- a/net/minecraft/world/level/chunk/storage/IOWorker.java
+++ b/net/minecraft/world/level/chunk/storage/IOWorker.java
@@ -6,7 +_,6 @@
 import java.io.IOException;
 import java.util.Iterator;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -36,7 +_,7 @@
 
    public CompletableFuture<Void> m_63538_(ChunkPos p_63539_, CompoundTag p_63540_) {
       return this.m_63545_(() -> {
-         IOWorker.PendingStore ioworker$pendingstore = this.f_63519_.computeIfAbsent(p_63539_, (p_63552_) -> {
+         IOWorker.PendingStore ioworker$pendingstore = this.f_63519_.computeIfAbsent(p_63539_, (p_235977_1_) -> {
             return new IOWorker.PendingStore(p_63540_);
          });
          ioworker$pendingstore.f_63565_ = p_63540_;
@@ -74,13 +_,13 @@
 
    public CompletableFuture<Void> m_63525_() {
       CompletableFuture<Void> completablefuture = this.m_63545_(() -> {
-         return Either.left(CompletableFuture.allOf(this.f_63519_.values().stream().map((p_63542_) -> {
-            return p_63542_.f_63566_;
-         }).toArray((p_63527_) -> {
-            return new CompletableFuture[p_63527_];
+         return Either.left(CompletableFuture.allOf(this.f_63519_.values().stream().map((p_235973_0_) -> {
+            return p_235973_0_.f_63566_;
+         }).toArray((p_235970_0_) -> {
+            return new CompletableFuture[p_235970_0_];
          })));
       }).thenCompose(Function.identity());
-      return completablefuture.thenCompose((p_63544_) -> {
+      return completablefuture.thenCompose((p_235974_1_) -> {
          return this.m_63545_(() -> {
             try {
                this.f_63518_.m_63705_();
@@ -94,10 +_,10 @@
    }
 
    private <T> CompletableFuture<T> m_63545_(Supplier<Either<T, Exception>> p_63546_) {
-      return this.f_63517_.m_18722_((p_63549_) -> {
+      return this.f_63517_.m_18722_((p_235976_2_) -> {
          return new StrictQueue.IntRunnable(IOWorker.Priority.HIGH.ordinal(), () -> {
             if (!this.f_63516_.get()) {
-               p_63549_.m_6937_(p_63546_.get());
+               p_235976_2_.m_6937_(p_63546_.get());
             }
 
             this.m_63561_();
@@ -106,9 +_,9 @@
    }
 
    private void m_63553_() {
-      Iterator<Entry<ChunkPos, IOWorker.PendingStore>> iterator = this.f_63519_.entrySet().iterator();
+      Iterator<Map.Entry<ChunkPos, IOWorker.PendingStore>> iterator = this.f_63519_.entrySet().iterator();
       if (iterator.hasNext()) {
-         Entry<ChunkPos, IOWorker.PendingStore> entry = iterator.next();
+         Map.Entry<ChunkPos, IOWorker.PendingStore> entry = iterator.next();
          iterator.remove();
          this.m_63535_(entry.getKey(), entry.getValue());
          this.m_63561_();
@@ -132,9 +_,9 @@
 
    public void close() throws IOException {
       if (this.f_63516_.compareAndSet(false, true)) {
-         CompletableFuture<Unit> completablefuture = this.f_63517_.m_18720_((p_63529_) -> {
+         CompletableFuture<Unit> completablefuture = this.f_63517_.m_18720_((p_235971_0_) -> {
             return new StrictQueue.IntRunnable(IOWorker.Priority.HIGH.ordinal(), () -> {
-               p_63529_.m_6937_(Unit.INSTANCE);
+               p_235971_0_.m_6937_(Unit.INSTANCE);
             });
          });
 
