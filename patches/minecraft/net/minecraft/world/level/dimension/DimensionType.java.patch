--- a/net/minecraft/world/level/dimension/DimensionType.java
+++ b/net/minecraft/world/level/dimension/DimensionType.java
@@ -37,20 +_,20 @@
    public static final ResourceLocation f_63840_ = new ResourceLocation("overworld");
    public static final ResourceLocation f_63841_ = new ResourceLocation("the_nether");
    public static final ResourceLocation f_63842_ = new ResourceLocation("the_end");
-   public static final Codec<DimensionType> f_63843_ = RecordCodecBuilder.create((p_63914_) -> {
-      return p_63914_.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((p_63929_) -> {
-         return p_63929_.map(OptionalLong::of).orElseGet(OptionalLong::empty);
-      }, (p_63931_) -> {
-         return p_63931_.isPresent() ? Optional.of(p_63931_.getAsLong()) : Optional.empty();
-      }).forGetter((p_63958_) -> {
-         return p_63958_.f_63854_;
-      }), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::m_63935_), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::m_63946_), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::m_63951_), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::m_63956_), Codec.doubleRange((double)1.0E-5F, 3.0E7D).fieldOf("coordinate_scale").forGetter(DimensionType::m_63959_), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::m_63960_), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::m_63961_), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::m_63962_), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::m_63963_), Codec.intRange(0, 256).fieldOf("logical_height").forGetter(DimensionType::m_63964_), ResourceLocation.f_135803_.fieldOf("infiniburn").forGetter((p_63953_) -> {
-         return p_63953_.f_63836_;
-      }), ResourceLocation.f_135803_.fieldOf("effects").orElse(f_63840_).forGetter((p_63948_) -> {
-         return p_63948_.f_63837_;
-      }), Codec.FLOAT.fieldOf("ambient_light").forGetter((p_63939_) -> {
-         return p_63939_.f_63838_;
-      })).apply(p_63914_, DimensionType::new);
+   public static final Codec<DimensionType> f_63843_ = RecordCodecBuilder.create((p_236026_0_) -> {
+      return p_236026_0_.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((p_236028_0_) -> {
+         return p_236028_0_.map(OptionalLong::of).orElseGet(OptionalLong::empty);
+      }, (p_236029_0_) -> {
+         return p_236029_0_.isPresent() ? Optional.of(p_236029_0_.getAsLong()) : Optional.empty();
+      }).forGetter((p_236044_0_) -> {
+         return p_236044_0_.f_63854_;
+      }), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::m_63935_), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::m_63946_), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::m_63951_), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::m_63956_), Codec.doubleRange((double)1.0E-5F, 3.0E7D).fieldOf("coordinate_scale").forGetter(DimensionType::m_63959_), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::m_63960_), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::m_63961_), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::m_63962_), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::m_63963_), Codec.intRange(0, 256).fieldOf("logical_height").forGetter(DimensionType::m_63964_), ResourceLocation.f_135803_.fieldOf("infiniburn").forGetter((p_241508_0_) -> {
+         return p_241508_0_.f_63836_;
+      }), ResourceLocation.f_135803_.fieldOf("effects").orElse(f_63840_).forGetter((p_242721_0_) -> {
+         return p_242721_0_.f_63837_;
+      }), Codec.FLOAT.fieldOf("ambient_light").forGetter((p_236042_0_) -> {
+         return p_236042_0_.f_63838_;
+      })).apply(p_236026_0_, DimensionType::new);
    });
    public static final float[] f_63844_ = new float[]{1.0F, 0.75F, 0.5F, 0.25F, 0.0F, 0.25F, 0.5F, 0.75F};
    public static final ResourceKey<DimensionType> f_63845_ = ResourceKey.m_135785_(Registry.f_122818_, new ResourceLocation("overworld"));
