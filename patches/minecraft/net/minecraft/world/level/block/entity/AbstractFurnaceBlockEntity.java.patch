--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -91,6 +_,7 @@
       this.f_58312_ = p_58324_;
    }
 
+   @Deprecated //Forge - get burn times by calling ForgeHooks#getBurnTime(ItemStack)
    public static Map<Item, Integer> m_58423_() {
       Map<Item, Integer> map = Maps.newLinkedHashMap();
       m_58374_(map, Items.f_42448_, 20000);
@@ -184,13 +_,13 @@
       return this.f_58316_ > 0;
    }
 
-   public void m_8084_(BlockState p_58360_, CompoundTag p_58361_) {
+   public void m_8084_(BlockState p_58360_, CompoundTag p_58361_) { //TODO: MARK
       super.m_8084_(p_58360_, p_58361_);
       this.f_58310_ = NonNullList.m_122780_(this.m_6643_(), ItemStack.f_41583_);
       ContainerHelper.m_18980_(p_58361_, this.f_58310_);
-      this.f_58316_ = p_58361_.m_128448_("BurnTime");
-      this.f_58318_ = p_58361_.m_128448_("CookTime");
-      this.f_58319_ = p_58361_.m_128448_("CookTimeTotal");
+      this.f_58316_ = p_58361_.m_128451_("BurnTime");
+      this.f_58318_ = p_58361_.m_128451_("CookTime");
+      this.f_58319_ = p_58361_.m_128451_("CookTimeTotal");
       this.f_58317_ = this.m_7743_(this.f_58310_.get(1));
       CompoundTag compoundtag = p_58361_.m_128469_("RecipesUsed");
 
@@ -202,13 +_,13 @@
 
    public CompoundTag m_6945_(CompoundTag p_58379_) {
       super.m_6945_(p_58379_);
-      p_58379_.m_128376_("BurnTime", (short)this.f_58316_);
-      p_58379_.m_128376_("CookTime", (short)this.f_58318_);
-      p_58379_.m_128376_("CookTimeTotal", (short)this.f_58319_);
+      p_58379_.m_128405_("BurnTime", this.f_58316_);
+      p_58379_.m_128405_("CookTime", this.f_58318_);
+      p_58379_.m_128405_("CookTimeTotal", this.f_58319_);
       ContainerHelper.m_18973_(p_58379_, this.f_58310_);
       CompoundTag compoundtag = new CompoundTag();
-      this.f_58320_.forEach((p_58382_, p_58383_) -> {
-         compoundtag.m_128405_(p_58382_.toString(), p_58383_);
+      this.f_58320_.forEach((p_235643_1_, p_235643_2_) -> {
+         compoundtag.m_128405_(p_235643_1_.toString(), p_235643_2_);
       });
       p_58379_.m_128365_("RecipesUsed", compoundtag);
       return p_58379_;
@@ -224,18 +_,20 @@
       if (!this.f_58857_.f_46443_) {
          ItemStack itemstack = this.f_58310_.get(1);
          if (this.m_58425_() || !itemstack.m_41619_() && !this.f_58310_.get(0).m_41619_()) {
-            Recipe<?> recipe = this.f_58857_.m_7465_().m_44015_((RecipeType<AbstractCookingRecipe>)this.f_58312_, this, this.f_58857_).orElse((AbstractCookingRecipe)null);
+            Recipe<?> recipe = this.f_58857_.m_7465_().m_44015_((RecipeType<AbstractCookingRecipe>)this.f_58312_, this, this.f_58857_).orElse(null);
             if (!this.m_58425_() && this.m_58401_(recipe)) {
                this.f_58316_ = this.m_7743_(itemstack);
                this.f_58317_ = this.f_58316_;
                if (this.m_58425_()) {
                   flag1 = true;
+                  if (itemstack.hasContainerItem())
+                      this.f_58310_.set(1, itemstack.getContainerItem());
+                  else
                   if (!itemstack.m_41619_()) {
                      Item item = itemstack.m_41720_();
                      itemstack.m_41774_(1);
                      if (itemstack.m_41619_()) {
-                        Item item1 = item.m_41469_();
-                        this.f_58310_.set(1, item1 == null ? ItemStack.f_41583_ : new ItemStack(item1));
+                        this.f_58310_.set(1, itemstack.getContainerItem());
                      }
                   }
                }
@@ -279,10 +_,10 @@
                return true;
             } else if (!itemstack1.m_41656_(itemstack)) {
                return false;
-            } else if (itemstack1.m_41613_() < this.m_6893_() && itemstack1.m_41613_() < itemstack1.m_41741_()) {
+            } else if (itemstack1.m_41613_() + itemstack.m_41613_() <= this.m_6893_() && itemstack1.m_41613_() + itemstack.m_41613_() <= itemstack1.m_41741_()) { // Forge fix: make furnace respect stack sizes in furnace recipes
                return true;
             } else {
-               return itemstack1.m_41613_() < itemstack.m_41741_();
+               return itemstack1.m_41613_() + itemstack.m_41613_() <= itemstack.m_41741_(); // Forge fix: make furnace respect stack sizes in furnace recipes
             }
          }
       } else {
@@ -298,7 +_,7 @@
          if (itemstack2.m_41619_()) {
             this.f_58310_.set(2, itemstack1.m_41777_());
          } else if (itemstack2.m_41720_() == itemstack1.m_41720_()) {
-            itemstack2.m_41769_(1);
+            itemstack2.m_41769_(itemstack1.m_41613_());
          }
 
          if (!this.f_58857_.f_46443_) {
@@ -318,7 +_,7 @@
          return 0;
       } else {
          Item item = p_58343_.m_41720_();
-         return m_58423_().getOrDefault(item, 0);
+         return net.minecraftforge.common.ForgeHooks.getBurnTime(p_58343_);
       }
    }
 
@@ -327,7 +_,7 @@
    }
 
    public static boolean m_58399_(ItemStack p_58400_) {
-      return m_58423_().containsKey(p_58400_.m_41720_());
+      return net.minecraftforge.common.ForgeHooks.getBurnTime(p_58400_) > 0;
    }
 
    public int[] m_7071_(Direction p_58363_) {
@@ -444,9 +_,9 @@
       List<Recipe<?>> list = Lists.newArrayList();
 
       for(Entry<ResourceLocation> entry : this.f_58320_.object2IntEntrySet()) {
-         p_58347_.m_7465_().m_44043_(entry.getKey()).ifPresent((p_58369_) -> {
-            list.add(p_58369_);
-            m_58349_(p_58347_, p_58348_, entry.getIntValue(), ((AbstractCookingRecipe)p_58369_).m_43750_());
+         p_58347_.m_7465_().m_44043_(entry.getKey()).ifPresent((p_235642_4_) -> {
+            list.add(p_235642_4_);
+            m_58349_(p_58347_, p_58348_, entry.getIntValue(), ((AbstractCookingRecipe)p_235642_4_).m_43750_());
          });
       }
 
@@ -473,5 +_,28 @@
          p_58342_.m_36491_(itemstack);
       }
 
+   }
+
+   net.minecraftforge.common.util.LazyOptional<? extends net.minecraftforge.items.IItemHandler>[] handlers =
+           net.minecraftforge.items.wrapper.SidedInvWrapper.create(this, Direction.UP, Direction.DOWN, Direction.NORTH);
+
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+      if (!this.f_58859_ && facing != null && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
+         if (facing == Direction.UP)
+            return handlers[0].cast();
+         else if (facing == Direction.DOWN)
+            return handlers[1].cast();
+         else
+            return handlers[2].cast();
+      }
+      return super.getCapability(capability, facing);
+   }
+
+   @Override
+   protected void invalidateCaps() {
+      super.invalidateCaps();
+      for (int x = 0; x < handlers.length; x++)
+        handlers[x].invalidate();
    }
 }
