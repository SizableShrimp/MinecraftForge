--- a/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
+++ b/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
@@ -19,6 +_,7 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 import net.minecraft.core.Registry;
+import net.minecraft.data.worldgen.biome.Biomes;
 import net.minecraft.resources.RegistryLookupCodec;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
@@ -28,28 +_,28 @@
 
 public class MultiNoiseBiomeSource extends BiomeSource {
    private static final MultiNoiseBiomeSource.NoiseParameters f_48426_ = new MultiNoiseBiomeSource.NoiseParameters(-7, ImmutableList.of(1.0D, 1.0D));
-   public static final MapCodec<MultiNoiseBiomeSource> f_48424_ = RecordCodecBuilder.mapCodec((p_48477_) -> {
-      return p_48477_.group(Codec.LONG.fieldOf("seed").forGetter((p_48500_) -> {
-         return p_48500_.f_48437_;
-      }), RecordCodecBuilder.<Pair<Biome.ClimateParameters, Supplier<Biome>>>create((p_48487_) -> {
-         return p_48487_.group(Biome.ClimateParameters.f_47649_.fieldOf("parameters").forGetter(Pair::getFirst), Biome.f_47431_.fieldOf("biome").forGetter(Pair::getSecond)).apply(p_48487_, Pair::of);
-      }).listOf().fieldOf("biomes").forGetter((p_48498_) -> {
-         return p_48498_.f_48435_;
-      }), MultiNoiseBiomeSource.NoiseParameters.f_48501_.fieldOf("temperature_noise").forGetter((p_48496_) -> {
-         return p_48496_.f_48427_;
-      }), MultiNoiseBiomeSource.NoiseParameters.f_48501_.fieldOf("humidity_noise").forGetter((p_48494_) -> {
-         return p_48494_.f_48428_;
-      }), MultiNoiseBiomeSource.NoiseParameters.f_48501_.fieldOf("altitude_noise").forGetter((p_48492_) -> {
-         return p_48492_.f_48429_;
-      }), MultiNoiseBiomeSource.NoiseParameters.f_48501_.fieldOf("weirdness_noise").forGetter((p_48489_) -> {
-         return p_48489_.f_48430_;
-      })).apply(p_48477_, MultiNoiseBiomeSource::new);
+   public static final MapCodec<MultiNoiseBiomeSource> f_48424_ = RecordCodecBuilder.mapCodec((p_242602_0_) -> {
+      return p_242602_0_.group(Codec.LONG.fieldOf("seed").forGetter((p_235286_0_) -> {
+         return p_235286_0_.f_48437_;
+      }), RecordCodecBuilder.<Pair<Biome.ClimateParameters, Supplier<Biome>>>create((p_235282_0_) -> {
+         return p_235282_0_.group(Biome.ClimateParameters.f_47649_.fieldOf("parameters").forGetter(Pair::getFirst), Biome.f_47431_.fieldOf("biome").forGetter(Pair::getSecond)).apply(p_235282_0_, Pair::of);
+      }).listOf().fieldOf("biomes").forGetter((p_235284_0_) -> {
+         return p_235284_0_.f_48435_;
+      }), MultiNoiseBiomeSource.NoiseParameters.f_48501_.fieldOf("temperature_noise").forGetter((p_242608_0_) -> {
+         return p_242608_0_.f_48427_;
+      }), MultiNoiseBiomeSource.NoiseParameters.f_48501_.fieldOf("humidity_noise").forGetter((p_242607_0_) -> {
+         return p_242607_0_.f_48428_;
+      }), MultiNoiseBiomeSource.NoiseParameters.f_48501_.fieldOf("altitude_noise").forGetter((p_242606_0_) -> {
+         return p_242606_0_.f_48429_;
+      }), MultiNoiseBiomeSource.NoiseParameters.f_48501_.fieldOf("weirdness_noise").forGetter((p_242604_0_) -> {
+         return p_242604_0_.f_48430_;
+      })).apply(p_242602_0_, MultiNoiseBiomeSource::new);
    });
-   public static final Codec<MultiNoiseBiomeSource> f_48425_ = Codec.mapEither(MultiNoiseBiomeSource.PresetInstance.f_48540_, f_48424_).xmap((p_48473_) -> {
-      return p_48473_.map(MultiNoiseBiomeSource.PresetInstance::m_48565_, Function.identity());
-   }, (p_48471_) -> {
-      return p_48471_.m_48490_().map(Either::<MultiNoiseBiomeSource.PresetInstance, MultiNoiseBiomeSource>left).orElseGet(() -> {
-         return Either.right(p_48471_);
+   public static final Codec<MultiNoiseBiomeSource> f_48425_ = Codec.mapEither(MultiNoiseBiomeSource.PresetInstance.f_48540_, f_48424_).xmap((p_235277_0_) -> {
+      return p_235277_0_.map(MultiNoiseBiomeSource.PresetInstance::m_48565_, Function.identity());
+   }, (p_235275_0_) -> {
+      return p_235275_0_.m_48490_().map(Either::<MultiNoiseBiomeSource.PresetInstance, MultiNoiseBiomeSource>left).orElseGet(() -> {
+         return Either.right(p_235275_0_);
       });
    }).codec();
    private final MultiNoiseBiomeSource.NoiseParameters f_48427_;
@@ -99,28 +_,65 @@
    }
 
    private Optional<MultiNoiseBiomeSource.PresetInstance> m_48490_() {
-      return this.f_48438_.map((p_48475_) -> {
-         return new MultiNoiseBiomeSource.PresetInstance(p_48475_.getSecond(), p_48475_.getFirst(), this.f_48437_);
+      return this.f_48438_.map((p_242601_1_) -> {
+         return new MultiNoiseBiomeSource.PresetInstance(p_242601_1_.getSecond(), p_242601_1_.getFirst(), this.f_48437_);
       });
    }
 
    public Biome m_7158_(int p_48479_, int p_48480_, int p_48481_) {
       int i = this.f_48436_ ? p_48480_ : 0;
       Biome.ClimateParameters biome$climateparameters = new Biome.ClimateParameters((float)this.f_48431_.m_75380_((double)p_48479_, (double)i, (double)p_48481_), (float)this.f_48432_.m_75380_((double)p_48479_, (double)i, (double)p_48481_), (float)this.f_48433_.m_75380_((double)p_48479_, (double)i, (double)p_48481_), (float)this.f_48434_.m_75380_((double)p_48479_, (double)i, (double)p_48481_), 0.0F);
-      return this.f_48435_.stream().min(Comparator.comparing((p_48469_) -> {
-         return p_48469_.getFirst().m_47662_(biome$climateparameters);
-      })).map(Pair::getSecond).map(Supplier::get).orElse(net.minecraft.data.worldgen.biome.Biomes.f_127322_);
+      return this.f_48435_.stream().min(Comparator.comparing((p_235272_1_) -> {
+         return p_235272_1_.getFirst().m_47662_(biome$climateparameters);
+      })).map(Pair::getSecond).map(Supplier::get).orElse(Biomes.f_127322_);
    }
 
    public boolean m_48482_(long p_48483_) {
       return this.f_48437_ == p_48483_ && this.f_48438_.isPresent() && Objects.equals(this.f_48438_.get().getSecond(), MultiNoiseBiomeSource.Preset.f_48512_);
    }
 
+   static final class PresetInstance {
+      public static final MapCodec<MultiNoiseBiomeSource.PresetInstance> f_48540_ = RecordCodecBuilder.mapCodec((p_242630_0_) -> {
+         return p_242630_0_.group(ResourceLocation.f_135803_.flatXmap((p_242631_0_) -> {
+            return Optional.ofNullable(MultiNoiseBiomeSource.Preset.f_48513_.get(p_242631_0_)).map(DataResult::success).orElseGet(() -> {
+               return DataResult.error("Unknown preset: " + p_242631_0_);
+            });
+         }, (p_242629_0_) -> {
+            return DataResult.success(p_242629_0_.f_48514_);
+         }).fieldOf("preset").stable().forGetter(MultiNoiseBiomeSource.PresetInstance::m_48554_), RegistryLookupCodec.m_135622_(Registry.f_122885_).forGetter(MultiNoiseBiomeSource.PresetInstance::m_48561_), Codec.LONG.fieldOf("seed").stable().forGetter(MultiNoiseBiomeSource.PresetInstance::m_48564_)).apply(p_242630_0_, p_242630_0_.stable(MultiNoiseBiomeSource.PresetInstance::new));
+      });
+      private final MultiNoiseBiomeSource.Preset f_48541_;
+      private final Registry<Biome> f_48542_;
+      private final long f_48543_;
+
+      private PresetInstance(MultiNoiseBiomeSource.Preset p_48546_, Registry<Biome> p_48547_, long p_48548_) {
+         this.f_48541_ = p_48546_;
+         this.f_48542_ = p_48547_;
+         this.f_48543_ = p_48548_;
+      }
+
+      public MultiNoiseBiomeSource.Preset m_48554_() {
+         return this.f_48541_;
+      }
+
+      public Registry<Biome> m_48561_() {
+         return this.f_48542_;
+      }
+
+      public long m_48564_() {
+         return this.f_48543_;
+      }
+
+      public MultiNoiseBiomeSource m_48565_() {
+         return this.f_48541_.m_48529_(this.f_48542_, this.f_48543_);
+      }
+   }
+
    static class NoiseParameters {
       private final int f_48502_;
       private final DoubleList f_48503_;
-      public static final Codec<MultiNoiseBiomeSource.NoiseParameters> f_48501_ = RecordCodecBuilder.create((p_48510_) -> {
-         return p_48510_.group(Codec.INT.fieldOf("firstOctave").forGetter(MultiNoiseBiomeSource.NoiseParameters::m_48508_), Codec.DOUBLE.listOf().fieldOf("amplitudes").forGetter(MultiNoiseBiomeSource.NoiseParameters::m_48511_)).apply(p_48510_, MultiNoiseBiomeSource.NoiseParameters::new);
+      public static final Codec<MultiNoiseBiomeSource.NoiseParameters> f_48501_ = RecordCodecBuilder.create((p_242613_0_) -> {
+         return p_242613_0_.group(Codec.INT.fieldOf("firstOctave").forGetter(MultiNoiseBiomeSource.NoiseParameters::m_48508_), Codec.DOUBLE.listOf().fieldOf("amplitudes").forGetter(MultiNoiseBiomeSource.NoiseParameters::m_48511_)).apply(p_242613_0_, MultiNoiseBiomeSource.NoiseParameters::new);
       });
 
       public NoiseParameters(int p_48506_, List<Double> p_48507_) {
@@ -139,18 +_,18 @@
 
    public static class Preset {
       private static final Map<ResourceLocation, MultiNoiseBiomeSource.Preset> f_48513_ = Maps.newHashMap();
-      public static final MultiNoiseBiomeSource.Preset f_48512_ = new MultiNoiseBiomeSource.Preset(new ResourceLocation("nether"), (p_48524_, p_48525_, p_48526_) -> {
-         return new MultiNoiseBiomeSource(p_48526_, ImmutableList.of(Pair.of(new Biome.ClimateParameters(0.0F, 0.0F, 0.0F, 0.0F, 0.0F), () -> {
-            return p_48525_.m_123013_(Biomes.f_48209_);
+      public static final MultiNoiseBiomeSource.Preset f_48512_ = new MultiNoiseBiomeSource.Preset(new ResourceLocation("nether"), (p_242617_0_, p_242617_1_, p_242617_2_) -> {
+         return new MultiNoiseBiomeSource(p_242617_2_, ImmutableList.of(Pair.of(new Biome.ClimateParameters(0.0F, 0.0F, 0.0F, 0.0F, 0.0F), () -> {
+            return p_242617_1_.m_123013_(net.minecraft.world.level.biome.Biomes.f_48209_);
          }), Pair.of(new Biome.ClimateParameters(0.0F, -0.5F, 0.0F, 0.0F, 0.0F), () -> {
-            return p_48525_.m_123013_(Biomes.f_48199_);
+            return p_242617_1_.m_123013_(net.minecraft.world.level.biome.Biomes.f_48199_);
          }), Pair.of(new Biome.ClimateParameters(0.4F, 0.0F, 0.0F, 0.0F, 0.0F), () -> {
-            return p_48525_.m_123013_(Biomes.f_48200_);
+            return p_242617_1_.m_123013_(net.minecraft.world.level.biome.Biomes.f_48200_);
          }), Pair.of(new Biome.ClimateParameters(0.0F, 0.5F, 0.0F, 0.0F, 0.375F), () -> {
-            return p_48525_.m_123013_(Biomes.f_48201_);
+            return p_242617_1_.m_123013_(net.minecraft.world.level.biome.Biomes.f_48201_);
          }), Pair.of(new Biome.ClimateParameters(-0.5F, 0.0F, 0.0F, 0.0F, 0.175F), () -> {
-            return p_48525_.m_123013_(Biomes.f_48175_);
-         })), Optional.of(Pair.of(p_48525_, p_48524_)));
+            return p_242617_1_.m_123013_(net.minecraft.world.level.biome.Biomes.f_48175_);
+         })), Optional.of(Pair.of(p_242617_1_, p_242617_0_)));
       });
       private final ResourceLocation f_48514_;
       private final Function3<MultiNoiseBiomeSource.Preset, Registry<Biome>, Long, MultiNoiseBiomeSource> f_48515_;
@@ -163,43 +_,6 @@
 
       public MultiNoiseBiomeSource m_48529_(Registry<Biome> p_48530_, long p_48531_) {
          return this.f_48515_.apply(this, p_48530_, p_48531_);
-      }
-   }
-
-   static final class PresetInstance {
-      public static final MapCodec<MultiNoiseBiomeSource.PresetInstance> f_48540_ = RecordCodecBuilder.mapCodec((p_48558_) -> {
-         return p_48558_.group(ResourceLocation.f_135803_.flatXmap((p_48560_) -> {
-            return Optional.ofNullable(MultiNoiseBiomeSource.Preset.f_48513_.get(p_48560_)).map(DataResult::success).orElseGet(() -> {
-               return DataResult.error("Unknown preset: " + p_48560_);
-            });
-         }, (p_48556_) -> {
-            return DataResult.success(p_48556_.f_48514_);
-         }).fieldOf("preset").stable().forGetter(MultiNoiseBiomeSource.PresetInstance::m_48554_), RegistryLookupCodec.m_135622_(Registry.f_122885_).forGetter(MultiNoiseBiomeSource.PresetInstance::m_48561_), Codec.LONG.fieldOf("seed").stable().forGetter(MultiNoiseBiomeSource.PresetInstance::m_48564_)).apply(p_48558_, p_48558_.stable(MultiNoiseBiomeSource.PresetInstance::new));
-      });
-      private final MultiNoiseBiomeSource.Preset f_48541_;
-      private final Registry<Biome> f_48542_;
-      private final long f_48543_;
-
-      private PresetInstance(MultiNoiseBiomeSource.Preset p_48546_, Registry<Biome> p_48547_, long p_48548_) {
-         this.f_48541_ = p_48546_;
-         this.f_48542_ = p_48547_;
-         this.f_48543_ = p_48548_;
-      }
-
-      public MultiNoiseBiomeSource.Preset m_48554_() {
-         return this.f_48541_;
-      }
-
-      public Registry<Biome> m_48561_() {
-         return this.f_48542_;
-      }
-
-      public long m_48564_() {
-         return this.f_48543_;
-      }
-
-      public MultiNoiseBiomeSource m_48565_() {
-         return this.f_48541_.m_48529_(this.f_48542_, this.f_48543_);
       }
    }
 }
