--- a/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -37,10 +_,10 @@
 import org.apache.logging.log4j.Logger;
 
 public class WorldGenSettings {
-   public static final Codec<WorldGenSettings> f_64600_ = RecordCodecBuilder.<WorldGenSettings>create((p_64626_) -> {
-      return p_64626_.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::m_64619_), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::m_64657_), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::m_64660_), MappedRegistry.m_122747_(Registry.f_122820_, Lifecycle.stable(), LevelStem.f_63970_).xmap(LevelStem::m_63987_, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::m_64663_), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((p_64624_) -> {
-         return p_64624_.f_64606_;
-      })).apply(p_64626_, p_64626_.stable(WorldGenSettings::new));
+   public static final Codec<WorldGenSettings> f_64600_ = RecordCodecBuilder.<WorldGenSettings>create((p_236214_0_) -> {
+      return p_236214_0_.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::m_64619_), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::m_64657_), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::m_64660_), MappedRegistry.m_122747_(Registry.f_122820_, Lifecycle.stable(), LevelStem.f_63970_).xmap(LevelStem::m_63987_, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::m_64663_), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((p_236213_0_) -> {
+         return p_236213_0_.f_64606_;
+      })).apply(p_236214_0_, p_236214_0_.stable(WorldGenSettings::new));
    }).comapFlatMap(WorldGenSettings::m_64674_, Function.identity());
    private static final Logger f_64601_ = LogManager.getLogger();
    private final long f_64602_;
@@ -145,8 +_,8 @@
    }
 
    public ImmutableSet<ResourceKey<Level>> m_64667_() {
-      return this.m_64663_().m_6579_().stream().map((p_64653_) -> {
-         return ResourceKey.m_135785_(Registry.f_122819_, p_64653_.getKey().m_135782_());
+      return this.m_64663_().m_6579_().stream().map((p_236218_0_) -> {
+         return ResourceKey.m_135785_(Registry.f_122819_, p_236218_0_.getKey().m_135782_());
       }).collect(ImmutableSet.toImmutableSet());
    }
 
@@ -186,9 +_,9 @@
       boolean flag = s2 == null || Boolean.parseBoolean(s2);
       p_64649_.put("generate-structures", Objects.toString(flag));
       String s3 = (String)p_64649_.get("level-type");
-      String s4 = Optional.ofNullable(s3).map((p_64651_) -> {
-         return p_64651_.toLowerCase(Locale.ROOT);
-      }).orElse("default");
+      String s4 = Optional.ofNullable(s3).map((p_236217_0_) -> {
+         return p_236217_0_.toLowerCase(Locale.ROOT);
+      }).orElseGet(net.minecraftforge.common.ForgeHooks::getDefaultWorldType);
       p_64649_.put("level-type", s4);
       long i = (new Random()).nextLong();
       if (!s1.isEmpty()) {
@@ -206,6 +_,8 @@
       Registry<Biome> registry = p_64648_.m_123090_(Registry.f_122885_);
       Registry<NoiseGeneratorSettings> registry1 = p_64648_.m_123090_(Registry.f_122878_);
       MappedRegistry<LevelStem> mappedregistry = DimensionType.m_63921_(registry2, registry, registry1, i);
+      net.minecraftforge.common.world.ForgeWorldType type = net.minecraftforge.registries.ForgeRegistries.WORLD_TYPES.getValue(new net.minecraft.resources.ResourceLocation(s4));
+      if (type != null) return type.createSettings(p_64648_, i, flag, false, s);
       switch(s4) {
       case "flat":
          JsonObject jsonobject = !s.isEmpty() ? GsonHelper.m_13864_(s) : new JsonObject();
