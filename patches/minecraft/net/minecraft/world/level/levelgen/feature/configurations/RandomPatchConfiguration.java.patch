--- a/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
+++ b/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
@@ -14,30 +_,30 @@
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
 
 public class RandomPatchConfiguration implements FeatureConfiguration {
-   public static final Codec<RandomPatchConfiguration> f_67902_ = RecordCodecBuilder.create((p_67955_) -> {
-      return p_67955_.group(BlockStateProvider.f_68747_.fieldOf("state_provider").forGetter((p_67975_) -> {
-         return p_67975_.f_67903_;
-      }), BlockPlacer.f_67480_.fieldOf("block_placer").forGetter((p_67973_) -> {
-         return p_67973_.f_67904_;
-      }), BlockState.f_61039_.listOf().fieldOf("whitelist").forGetter((p_67971_) -> {
-         return p_67971_.f_67905_.stream().map(Block::m_49966_).collect(Collectors.toList());
-      }), BlockState.f_61039_.listOf().fieldOf("blacklist").forGetter((p_67969_) -> {
-         return ImmutableList.copyOf(p_67969_.f_67906_);
-      }), Codec.INT.fieldOf("tries").orElse(128).forGetter((p_67967_) -> {
-         return p_67967_.f_67907_;
-      }), Codec.INT.fieldOf("xspread").orElse(7).forGetter((p_67965_) -> {
-         return p_67965_.f_67908_;
-      }), Codec.INT.fieldOf("yspread").orElse(3).forGetter((p_67963_) -> {
-         return p_67963_.f_67909_;
-      }), Codec.INT.fieldOf("zspread").orElse(7).forGetter((p_67961_) -> {
-         return p_67961_.f_67910_;
-      }), Codec.BOOL.fieldOf("can_replace").orElse(false).forGetter((p_67959_) -> {
-         return p_67959_.f_67911_;
-      }), Codec.BOOL.fieldOf("project").orElse(true).forGetter((p_67957_) -> {
-         return p_67957_.f_67912_;
-      }), Codec.BOOL.fieldOf("need_water").orElse(false).forGetter((p_67953_) -> {
-         return p_67953_.f_67913_;
-      })).apply(p_67955_, RandomPatchConfiguration::new);
+   public static final Codec<RandomPatchConfiguration> f_67902_ = RecordCodecBuilder.create((p_236589_0_) -> {
+      return p_236589_0_.group(BlockStateProvider.f_68747_.fieldOf("state_provider").forGetter((p_236599_0_) -> {
+         return p_236599_0_.f_67903_;
+      }), BlockPlacer.f_67480_.fieldOf("block_placer").forGetter((p_236598_0_) -> {
+         return p_236598_0_.f_67904_;
+      }), BlockState.f_61039_.listOf().fieldOf("whitelist").forGetter((p_236597_0_) -> {
+         return p_236597_0_.f_67905_.stream().map(Block::m_49966_).collect(Collectors.toList());
+      }), BlockState.f_61039_.listOf().fieldOf("blacklist").forGetter((p_236596_0_) -> {
+         return ImmutableList.copyOf(p_236596_0_.f_67906_);
+      }), Codec.INT.fieldOf("tries").orElse(128).forGetter((p_236595_0_) -> {
+         return p_236595_0_.f_67907_;
+      }), Codec.INT.fieldOf("xspread").orElse(7).forGetter((p_236594_0_) -> {
+         return p_236594_0_.f_67908_;
+      }), Codec.INT.fieldOf("yspread").orElse(3).forGetter((p_236593_0_) -> {
+         return p_236593_0_.f_67909_;
+      }), Codec.INT.fieldOf("zspread").orElse(7).forGetter((p_236592_0_) -> {
+         return p_236592_0_.f_67910_;
+      }), Codec.BOOL.fieldOf("can_replace").orElse(false).forGetter((p_236591_0_) -> {
+         return p_236591_0_.f_67911_;
+      }), Codec.BOOL.fieldOf("project").orElse(true).forGetter((p_236590_0_) -> {
+         return p_236590_0_.f_67912_;
+      }), Codec.BOOL.fieldOf("need_water").orElse(false).forGetter((p_236588_0_) -> {
+         return p_236588_0_.f_67913_;
+      })).apply(p_236589_0_, RandomPatchConfiguration::new);
    });
    public final BlockStateProvider f_67903_;
    public final BlockPlacer f_67904_;
