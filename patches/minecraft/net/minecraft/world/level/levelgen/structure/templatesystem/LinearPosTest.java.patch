--- a/net/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest.java
+++ b/net/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest.java
@@ -7,16 +_,16 @@
 import net.minecraft.util.Mth;
 
 public class LinearPosTest extends PosRuleTest {
-   public static final Codec<LinearPosTest> f_74147_ = RecordCodecBuilder.create((p_74160_) -> {
-      return p_74160_.group(Codec.FLOAT.fieldOf("min_chance").orElse(0.0F).forGetter((p_74173_) -> {
-         return p_74173_.f_74148_;
-      }), Codec.FLOAT.fieldOf("max_chance").orElse(0.0F).forGetter((p_74171_) -> {
-         return p_74171_.f_74149_;
-      }), Codec.INT.fieldOf("min_dist").orElse(0).forGetter((p_74169_) -> {
-         return p_74169_.f_74150_;
-      }), Codec.INT.fieldOf("max_dist").orElse(0).forGetter((p_74162_) -> {
-         return p_74162_.f_74151_;
-      })).apply(p_74160_, LinearPosTest::new);
+   public static final Codec<LinearPosTest> f_74147_ = RecordCodecBuilder.create((p_237092_0_) -> {
+      return p_237092_0_.group(Codec.FLOAT.fieldOf("min_chance").orElse(0.0F).forGetter((p_237096_0_) -> {
+         return p_237096_0_.f_74148_;
+      }), Codec.FLOAT.fieldOf("max_chance").orElse(0.0F).forGetter((p_237095_0_) -> {
+         return p_237095_0_.f_74149_;
+      }), Codec.INT.fieldOf("min_dist").orElse(0).forGetter((p_237094_0_) -> {
+         return p_237094_0_.f_74150_;
+      }), Codec.INT.fieldOf("max_dist").orElse(0).forGetter((p_237093_0_) -> {
+         return p_237093_0_.f_74151_;
+      })).apply(p_237092_0_, LinearPosTest::new);
    });
    private final float f_74148_;
    private final float f_74149_;
