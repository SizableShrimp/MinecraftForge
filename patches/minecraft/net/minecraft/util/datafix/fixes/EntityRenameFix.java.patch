--- a/net/minecraft/util/datafix/fixes/EntityRenameFix.java
+++ b/net/minecraft/util/datafix/fixes/EntityRenameFix.java
@@ -18,13 +_,13 @@
    }
 
    public TypeRewriteRule makeRule() {
-      TaggedChoiceType<String> taggedchoicetype = (TaggedChoiceType<String>)this.getInputSchema().findChoiceType(References.f_16786_);
-      TaggedChoiceType<String> taggedchoicetype1 = (TaggedChoiceType<String>)this.getOutputSchema().findChoiceType(References.f_16786_);
-      return this.fixTypeEverywhere(this.f_15616_, taggedchoicetype, taggedchoicetype1, (p_15624_) -> {
-         return (p_15629_) -> {
-            String s = p_15629_.getFirst();
+      TaggedChoiceType<String> taggedchoicetype = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.f_16786_);
+      TaggedChoiceType<String> taggedchoicetype1 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.f_16786_);
+      return this.fixTypeEverywhere(this.f_15616_, taggedchoicetype, taggedchoicetype1, (p_209755_3_) -> {
+         return (p_209150_4_) -> {
+            String s = p_209150_4_.getFirst();
             Type<?> type = taggedchoicetype.types().get(s);
-            Pair<String, Typed<?>> pair = this.m_6911_(s, this.m_15630_(p_15629_.getSecond(), p_15624_, type));
+            Pair<String, Typed<?>> pair = this.m_6911_(s, this.m_15630_(p_209150_4_.getSecond(), p_209755_3_, type));
             Type<?> type1 = taggedchoicetype1.types().get(pair.getFirst());
             if (!type1.equals(pair.getSecond().getType(), true, true)) {
                throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type1, pair.getSecond().getType()));
