--- a/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java
+++ b/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java
@@ -31,14 +_,14 @@
       Type<?> type4 = type2.findFieldType("TileTicks");
       OpticFinder<?> opticfinder = DSL.fieldFinder("Level", type2);
       OpticFinder<?> opticfinder1 = DSL.fieldFinder("TileTicks", type4);
-      return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("ChunkToProtoChunkFix", type, this.getOutputSchema().getType(References.f_16773_), (p_15298_) -> {
-         return p_15298_.updateTyped(opticfinder, type3, (p_15302_) -> {
-            Optional<? extends Stream<? extends Dynamic<?>>> optional = p_15302_.getOptionalTyped(opticfinder1).flatMap((p_15304_) -> {
-               return p_15304_.write().result();
-            }).flatMap((p_15306_) -> {
-               return p_15306_.asStreamOpt().result();
+      return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("ChunkToProtoChunkFix", type, this.getOutputSchema().getType(References.f_16773_), (p_209732_3_) -> {
+         return p_209732_3_.updateTyped(opticfinder, type3, (p_207915_2_) -> {
+            Optional<? extends Stream<? extends Dynamic<?>>> optional = p_207915_2_.getOptionalTyped(opticfinder1).flatMap((p_233158_0_) -> {
+               return p_233158_0_.write().result();
+            }).flatMap((p_233159_0_) -> {
+               return p_233159_0_.asStreamOpt().result();
             });
-            Dynamic<?> dynamic = p_15302_.get(DSL.remainderFinder());
+            Dynamic<?> dynamic = p_207915_2_.get(DSL.remainderFinder());
             boolean flag = dynamic.get("TerrainPopulated").asBoolean(false) && (!dynamic.get("LightPopulated").asNumber().result().isPresent() || dynamic.get("LightPopulated").asBoolean(false));
             dynamic = dynamic.set("Status", dynamic.createString(flag ? "mobs_spawned" : "empty"));
             dynamic = dynamic.set("hasLegacyStructureData", dynamic.createBoolean(true));
@@ -59,23 +_,23 @@
                }
 
                Dynamic<?> dynamic2 = dynamic;
-               List<ShortList> list = IntStream.range(0, 16).mapToObj((p_15289_) -> {
+               List<ShortList> list = IntStream.range(0, 16).mapToObj((p_211428_0_) -> {
                   return new ShortArrayList();
                }).collect(Collectors.toList());
                if (optional.isPresent()) {
-                  optional.get().forEach((p_15312_) -> {
-                     int j = p_15312_.get("x").asInt(0);
-                     int k = p_15312_.get("y").asInt(0);
-                     int l = p_15312_.get("z").asInt(0);
+                  optional.get().forEach((p_233161_1_) -> {
+                     int j = p_233161_1_.get("x").asInt(0);
+                     int k = p_233161_1_.get("y").asInt(0);
+                     int l = p_233161_1_.get("z").asInt(0);
                      short short1 = m_15290_(j, k, l);
                      list.get(k >> 4).add(short1);
                   });
-                  dynamic = dynamic.set("ToBeTicked", dynamic.createList(list.stream().map((p_15309_) -> {
-                     return dynamic2.createList(p_15309_.stream().map(dynamic2::createShort));
+                  dynamic = dynamic.set("ToBeTicked", dynamic.createList(list.stream().map((p_233160_1_) -> {
+                     return dynamic2.createList(p_233160_1_.stream().map(dynamic2::createShort));
                   })));
                }
 
-               dynamic1 = DataFixUtils.orElse(p_15302_.set(DSL.remainderFinder(), dynamic).write().result(), dynamic);
+               dynamic1 = DataFixUtils.orElse(p_207915_2_.set(DSL.remainderFinder(), dynamic).write().result(), dynamic);
             } else {
                dynamic1 = dynamic;
             }
