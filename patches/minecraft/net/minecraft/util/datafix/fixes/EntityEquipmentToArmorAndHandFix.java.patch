--- a/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
+++ b/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
@@ -30,11 +_,11 @@
       Type<Pair<Either<List<IS>, Unit>, Pair<Either<List<IS>, Unit>, Dynamic<?>>>> type1 = DSL.and(DSL.optional(DSL.field("ArmorItems", DSL.list(p_15427_))), DSL.optional(DSL.field("HandItems", DSL.list(p_15427_))), DSL.remainderType());
       OpticFinder<Pair<Either<List<IS>, Unit>, Dynamic<?>>> opticfinder = DSL.typeFinder(type);
       OpticFinder<List<IS>> opticfinder1 = DSL.fieldFinder("Equipment", DSL.list(p_15427_));
-      return this.fixTypeEverywhereTyped("EntityEquipmentToArmorAndHandFix", this.getInputSchema().getType(References.f_16786_), this.getOutputSchema().getType(References.f_16786_), (p_15425_) -> {
+      return this.fixTypeEverywhereTyped("EntityEquipmentToArmorAndHandFix", this.getInputSchema().getType(References.f_16786_), this.getOutputSchema().getType(References.f_16786_), (p_207448_4_) -> {
          Either<List<IS>, Unit> either = Either.right(DSL.unit());
          Either<List<IS>, Unit> either1 = Either.right(DSL.unit());
-         Dynamic<?> dynamic = p_15425_.getOrCreate(DSL.remainderFinder());
-         Optional<List<IS>> optional = p_15425_.getOptional(opticfinder1);
+         Dynamic<?> dynamic = p_207448_4_.getOrCreate(DSL.remainderFinder());
+         Optional<List<IS>> optional = p_207448_4_.getOptional(opticfinder1);
          if (optional.isPresent()) {
             List<IS> list = optional.get();
             IS is = p_15427_.read(dynamic.emptyMap()).result().orElseThrow(() -> {
@@ -75,7 +_,7 @@
             dynamic = dynamic.remove("DropChances");
          }
 
-         return p_15425_.set(opticfinder, type1, Pair.of(either, Pair.of(either1, dynamic)));
+         return p_207448_4_.set(opticfinder, type1, Pair.of(either, Pair.of(either1, dynamic)));
       });
    }
 }
