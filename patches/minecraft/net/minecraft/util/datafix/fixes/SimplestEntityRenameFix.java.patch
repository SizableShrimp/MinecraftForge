--- a/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
+++ b/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
@@ -25,11 +_,11 @@
       if (!Objects.equals(this.getOutputSchema().getType(References.f_16784_), type)) {
          throw new IllegalStateException("Entity name type is not what was expected.");
       } else {
-         return TypeRewriteRule.seq(this.fixTypeEverywhere(this.f_16909_, taggedchoicetype, taggedchoicetype1, (p_16921_) -> {
-            return (p_16917_) -> {
-               return p_16917_.mapFirst((p_16925_) -> {
-                  String s = this.m_7476_(p_16925_);
-                  Type<?> type1 = taggedchoicetype.types().get(p_16925_);
+         return TypeRewriteRule.seq(this.fixTypeEverywhere(this.f_16909_, taggedchoicetype, taggedchoicetype1, (p_233400_3_) -> {
+            return (p_211307_3_) -> {
+               return p_211307_3_.mapFirst((p_211309_3_) -> {
+                  String s = this.m_7476_(p_211309_3_);
+                  Type<?> type1 = taggedchoicetype.types().get(p_211309_3_);
                   Type<?> type2 = taggedchoicetype1.types().get(s);
                   if (!type2.equals(type1, true, true)) {
                      throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type2, type1));
@@ -38,9 +_,9 @@
                   }
                });
             };
-         }), this.fixTypeEverywhere(this.f_16909_ + " for entity name", type, (p_16929_) -> {
-            return (p_16927_) -> {
-               return p_16927_.mapSecond(this::m_7476_);
+         }), this.fixTypeEverywhere(this.f_16909_ + " for entity name", type, (p_211308_1_) -> {
+            return (p_211310_1_) -> {
+               return p_211310_1_.mapSecond(this::m_7476_);
             };
          }));
       }
