--- a/net/minecraft/util/datafix/fixes/BlockRenameFix.java
+++ b/net/minecraft/util/datafix/fixes/BlockRenameFix.java
@@ -25,15 +_,15 @@
       if (!Objects.equals(type, type1)) {
          throw new IllegalStateException("block type is not what was expected.");
       } else {
-         TypeRewriteRule typerewriterule = this.fixTypeEverywhere(this.f_14908_ + " for block", type1, (p_14923_) -> {
-            return (p_14919_) -> {
-               return p_14919_.mapSecond(this::m_7384_);
+         TypeRewriteRule typerewriterule = this.fixTypeEverywhere(this.f_14908_ + " for block", type1, (p_209705_1_) -> {
+            return (p_206308_1_) -> {
+               return p_206308_1_.mapSecond(this::m_7384_);
             };
          });
-         TypeRewriteRule typerewriterule1 = this.fixTypeEverywhereTyped(this.f_14908_ + " for block_state", this.getInputSchema().getType(References.f_16783_), (p_14913_) -> {
-            return p_14913_.update(DSL.remainderFinder(), (p_14921_) -> {
-               Optional<String> optional = p_14921_.get("Name").asString().result();
-               return optional.isPresent() ? p_14921_.set("Name", p_14921_.createString(this.m_7384_(optional.get()))) : p_14921_;
+         TypeRewriteRule typerewriterule1 = this.fixTypeEverywhereTyped(this.f_14908_ + " for block_state", this.getInputSchema().getType(References.f_16783_), (p_209704_1_) -> {
+            return p_209704_1_.update(DSL.remainderFinder(), (p_207439_1_) -> {
+               Optional<String> optional = p_207439_1_.get("Name").asString().result();
+               return optional.isPresent() ? p_207439_1_.set("Name", p_207439_1_.createString(this.m_7384_(optional.get()))) : p_207439_1_;
             });
          });
          return TypeRewriteRule.seq(typerewriterule, typerewriterule1);
